<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__zcl__64" kind="group">
    <compoundname>zcl_64</compoundname>
    <title>64-bit integer support</title>
    <innerfile refid="jslong_8c">jslong.c</innerfile>
    <innerfile refid="zcl64_8h">zcl64.h</innerfile>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="group__zcl__64_1ga2e906cb47fc172ae60da5178075dd3c7" prot="public" static="no">
        <type><ref refid="struct_j_s_int64" kindref="compound">JSUint64</ref></type>
        <definition>typedef JSUint64 zcl64_t</definition>
        <argsstring></argsstring>
        <name>zcl64_t</name>
        <briefdescription>
<para>64-bit integer in host-byte-order Use for 56-bit values as well <ndash/> ZCL layer will make sure top byte is sign-extended. </para>        </briefdescription>
        <detaileddescription>
<para><xrefsect id="todo_1_todo000032"><xreftitle>Todo</xreftitle><xrefdescription><para>Actually code up support for 56-bit values like we did for 24 bit. </para></xrefdescription></xrefsect></para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="42" column="1" bodyfile="include/zigbee/zcl64.h" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__zcl__64_1ga09e45168abb5ea8e6d487514eae102c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jsll_mul</definition>
        <argsstring>(JSUint64 *rp, JSUint64 a, JSUint64 b)</argsstring>
        <name>jsll_mul</name>
        <param>
          <type><ref refid="struct_j_s_int64" kindref="compound">JSUint64</ref> *</type>
          <declname>rp</declname>
        </param>
        <param>
          <type><ref refid="struct_j_s_int64" kindref="compound">JSUint64</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="struct_j_s_int64" kindref="compound">JSUint64</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/jslong.c" line="64" column="1" bodyfile="src/util/jslong.c" bodystart="64" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="group__zcl__64_1ga0b4ed4198b603054301a4c9147e5f060" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jsll_mul32</definition>
        <argsstring>(JSUint64 *rp, JSUint32 a, JSUint32 b)</argsstring>
        <name>jsll_mul32</name>
        <param>
          <type><ref refid="struct_j_s_int64" kindref="compound">JSUint64</ref> *</type>
          <declname>rp</declname>
        </param>
        <param>
          <type>JSUint32</type>
          <declname>a</declname>
        </param>
        <param>
          <type>JSUint32</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/jslong.c" line="72" column="1" bodyfile="src/util/jslong.c" bodystart="72" bodyend="90"/>
      </memberdef>
      <memberdef kind="function" id="group__zcl__64_1gae8fbc6ec799a7c5568d9da44efbc3070" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>static void norm_udivmod32</definition>
        <argsstring>(JSUint32 *qp, JSUint32 *rp, JSUint64 a, JSUint32 b)</argsstring>
        <name>norm_udivmod32</name>
        <param>
          <type>JSUint32 *</type>
          <declname>qp</declname>
        </param>
        <param>
          <type>JSUint32 *</type>
          <declname>rp</declname>
        </param>
        <param>
          <type><ref refid="struct_j_s_int64" kindref="compound">JSUint64</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>JSUint32</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/jslong.c" line="97" column="1" bodyfile="src/util/jslong.c" bodystart="97" bodyend="129"/>
      </memberdef>
      <memberdef kind="function" id="group__zcl__64_1gab4827dc16aa30faa37afaac7e9c87490" prot="public" static="yes" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint_fast8_t</type>
        <definition>static uint_fast8_t CountLeadingZeros</definition>
        <argsstring>(JSUint32 a)</argsstring>
        <name>CountLeadingZeros</name>
        <param>
          <type>JSUint32</type>
          <declname>a</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/jslong.c" line="134" column="1" bodyfile="src/util/jslong.c" bodystart="134" bodyend="152"/>
      </memberdef>
      <memberdef kind="function" id="group__zcl__64_1ga26cb84da9083907cc41db0edf95b1b96" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jsll_udivmod</definition>
        <argsstring>(JSUint64 *qp, JSUint64 *rp, JSUint64 a, JSUint64 b)</argsstring>
        <name>jsll_udivmod</name>
        <param>
          <type><ref refid="struct_j_s_int64" kindref="compound">JSUint64</ref> *</type>
          <declname>qp</declname>
        </param>
        <param>
          <type><ref refid="struct_j_s_int64" kindref="compound">JSUint64</ref> *</type>
          <declname>rp</declname>
        </param>
        <param>
          <type><ref refid="struct_j_s_int64" kindref="compound">JSUint64</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type><ref refid="struct_j_s_int64" kindref="compound">JSUint64</ref></type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/jslong.c" line="157" column="1" bodyfile="src/util/jslong.c" bodystart="157" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="group__zcl__64_1gaf40c23a4a3872380497dae260ea58554" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jsll_div</definition>
        <argsstring>(JSUint64 *r, const JSUint64 *a, const JSUint64 *b)</argsstring>
        <name>jsll_div</name>
        <param>
          <type><ref refid="struct_j_s_int64" kindref="compound">JSUint64</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="struct_j_s_int64" kindref="compound">JSUint64</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="struct_j_s_int64" kindref="compound">JSUint64</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/jslong.c" line="323" column="1" bodyfile="src/util/jslong.c" bodystart="323" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="group__zcl__64_1gaecddfb7e3ca39fa5313632c47a47f20c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jsll_mod</definition>
        <argsstring>(JSUint64 *r, const JSUint64 *a, const JSUint64 *b)</argsstring>
        <name>jsll_mod</name>
        <param>
          <type><ref refid="struct_j_s_int64" kindref="compound">JSUint64</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type>const <ref refid="struct_j_s_int64" kindref="compound">JSUint64</ref> *</type>
          <declname>a</declname>
        </param>
        <param>
          <type>const <ref refid="struct_j_s_int64" kindref="compound">JSUint64</ref> *</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/jslong.c" line="352" column="1" bodyfile="src/util/jslong.c" bodystart="352" bodyend="374"/>
      </memberdef>
      <memberdef kind="function" id="group__zcl__64_1gadbc8463d4ec9862cbb621cdd5f7297fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jsll_shl</definition>
        <argsstring>(JSUint64 *r, JSUint64 a, uint_fast8_t b)</argsstring>
        <name>jsll_shl</name>
        <param>
          <type><ref refid="struct_j_s_int64" kindref="compound">JSUint64</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="struct_j_s_int64" kindref="compound">JSUint64</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint_fast8_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/jslong.c" line="378" column="1" bodyfile="src/util/jslong.c" bodystart="378" bodyend="395"/>
      </memberdef>
      <memberdef kind="function" id="group__zcl__64_1gab406a00beab4086e1f29bfa6c98e0e6d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jsll_shr</definition>
        <argsstring>(JSInt64 *r, JSInt64 a, uint_fast8_t b)</argsstring>
        <name>jsll_shr</name>
        <param>
          <type><ref refid="struct_j_s_int64" kindref="compound">JSInt64</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="struct_j_s_int64" kindref="compound">JSInt64</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint_fast8_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/jslong.c" line="399" column="1" bodyfile="src/util/jslong.c" bodystart="399" bodyend="416"/>
      </memberdef>
      <memberdef kind="function" id="group__zcl__64_1gaab6291a66e18f75aa28dd777cb66d49b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void jsll_ushr</definition>
        <argsstring>(JSInt64 *r, JSInt64 a, uint_fast8_t b)</argsstring>
        <name>jsll_ushr</name>
        <param>
          <type><ref refid="struct_j_s_int64" kindref="compound">JSInt64</ref> *</type>
          <declname>r</declname>
        </param>
        <param>
          <type><ref refid="struct_j_s_int64" kindref="compound">JSInt64</ref></type>
          <declname>a</declname>
        </param>
        <param>
          <type>uint_fast8_t</type>
          <declname>b</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/jslong.c" line="420" column="1" bodyfile="src/util/jslong.c" bodystart="420" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="group__zcl__64_1gaaeb3f577d08fb658090c74ce03da319a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int jsll_decstr</definition>
        <argsstring>(char *buffer, const JSInt64 *v)</argsstring>
        <name>jsll_decstr</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>const <ref refid="struct_j_s_int64" kindref="compound">JSInt64</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/jslong.c" line="441" column="1" bodyfile="src/util/jslong.c" bodystart="441" bodyend="453"/>
      </memberdef>
      <memberdef kind="function" id="group__zcl__64_1gaf41ea39427421502a4c90a5cd5f62cb7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int jsll_udecstr</definition>
        <argsstring>(char *buffer, const JSUint64 *v)</argsstring>
        <name>jsll_udecstr</name>
        <param>
          <type>char *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>const <ref refid="struct_j_s_int64" kindref="compound">JSUint64</ref> *</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/jslong.c" line="461" column="1" bodyfile="src/util/jslong.c" bodystart="461" bodyend="501"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__zcl__64_1ga82d69c4b59ebfde1f784f7d30246e575" prot="public" static="no">
        <name>jslo16</name>
        <param><defname>a</defname></param>
        <initializer>((a) &amp; 0x0000FFFF)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/jslong.c" line="58" column="9" bodyfile="src/util/jslong.c" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1ga50ea98cec1c7c8393b65115d0bd756f9" prot="public" static="no">
        <name>jshi16</name>
        <param><defname>a</defname></param>
        <initializer>((<ref refid="group__hal__dos_1ga09a1e304d66d35dd47daffee9731edaa" kindref="member">uint32_t</ref>)(a) &gt;&gt; 16)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/jslong.c" line="59" column="9" bodyfile="src/util/jslong.c" bodystart="59" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1ga8e855e53988a32f4428ceacce4f9870c" prot="public" static="no">
        <name>ZCL64_INIT</name>
        <param><defname>hi</defname></param>
        <param><defname>lo</defname></param>
        <initializer>JSLL_INIT(hi, lo)</initializer>
        <briefdescription>
<para>Initialize a zcl64_t variable with two literal 32-bit values. </para>        </briefdescription>
        <detaileddescription>
<para>Note that this macro is only valid as an initializer in a variable declaration. Use ZCL64_LOAD in general program statements.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">hi</parametername>
</parameternamelist>
<parameterdescription>
<para>upper 32 bits </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lo</parametername>
</parameternamelist>
<parameterdescription>
<para>lower 32 bits</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>an initializer for a zcl64_t variable</para></simplesect>
<simplesect kind="see"><para><ref refid="group__zcl__64_1ga899413577d0a7e9b641cc5c309b08aeb" kindref="member">ZCL64_LOAD</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="57" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1ga899413577d0a7e9b641cc5c309b08aeb" prot="public" static="no">
        <name>ZCL64_LOAD</name>
        <param><defname>r</defname></param>
        <param><defname>hi32</defname></param>
        <param><defname>lo32</defname></param>
        <initializer>((r).hi = (hi32), (r).lo = (lo32))</initializer>
        <briefdescription>
<para>Load a zcl64_t variable with two 32-bit values (high and low). </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">r</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable to assign (hi &lt;&lt; 32 + lo) to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">hi32</parametername>
</parameternamelist>
<parameterdescription>
<para>upper 32 bits to load into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">lo32</parametername>
</parameternamelist>
<parameterdescription>
<para>lower 32 bits to load into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>r</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1ga8e855e53988a32f4428ceacce4f9870c" kindref="member">ZCL64_INIT</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="70" column="11" bodyfile="include/zigbee/zcl64.h" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1gad0e4c484d689dee3c5f1302fc80aef3e" prot="public" static="no">
        <name>ZCL64_IS_ZERO</name>
        <param><defname>a</defname></param>
        <initializer>JSLL_IS_ZERO(a)</initializer>
        <briefdescription>
<para>Compare a zcl64_t variable to zero. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(a == 0)</para></simplesect>
<simplesect kind="see"><para><ref refid="group__zcl__64_1ga329900843c1e59c30b4bdff95ee594bd" kindref="member">ZCL64_EQ</ref>, <ref refid="group__zcl__64_1gaffa76b2bdfb8bc021db06efe331a2e5f" kindref="member">ZCL64_NE</ref>, <ref refid="group__zcl__64_1ga524b42ba2596f4c0392780c540f5d5b6" kindref="member">ZCL64_GE_ZERO</ref>, ZCL64_CMP, ZCL64_UCMP </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="81" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="81" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1ga329900843c1e59c30b4bdff95ee594bd" prot="public" static="no">
        <name>ZCL64_EQ</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>JSLL_EQ(a, b)</initializer>
        <briefdescription>
<para>Compare two zcl64_t variables for equality. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(a == b)</para></simplesect>
<simplesect kind="see"><para><ref refid="group__zcl__64_1gad0e4c484d689dee3c5f1302fc80aef3e" kindref="member">ZCL64_IS_ZERO</ref>, <ref refid="group__zcl__64_1gaffa76b2bdfb8bc021db06efe331a2e5f" kindref="member">ZCL64_NE</ref>, <ref refid="group__zcl__64_1ga524b42ba2596f4c0392780c540f5d5b6" kindref="member">ZCL64_GE_ZERO</ref>, ZCL64_CMP, ZCL64_UCMP </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="92" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="92" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1gaffa76b2bdfb8bc021db06efe331a2e5f" prot="public" static="no">
        <name>ZCL64_NE</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>JSLL_NE(a, b)</initializer>
        <briefdescription>
<para>Compare two zcl64_t variables for inequality. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(a != b)</para></simplesect>
<simplesect kind="see"><para><ref refid="group__zcl__64_1gad0e4c484d689dee3c5f1302fc80aef3e" kindref="member">ZCL64_IS_ZERO</ref>, <ref refid="group__zcl__64_1ga329900843c1e59c30b4bdff95ee594bd" kindref="member">ZCL64_EQ</ref>, <ref refid="group__zcl__64_1ga524b42ba2596f4c0392780c540f5d5b6" kindref="member">ZCL64_GE_ZERO</ref>, ZCL64_CMP, ZCL64_UCMP </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="103" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="103" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1ga524b42ba2596f4c0392780c540f5d5b6" prot="public" static="no">
        <name>ZCL64_GE_ZERO</name>
        <param><defname>a</defname></param>
        <initializer>JSLL_GE_ZERO(a)</initializer>
        <briefdescription>
<para>Compare a signed zcl64_t variable to 0. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>signed zcl64_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(a &gt;= 0)</para></simplesect>
<simplesect kind="see"><para><ref refid="group__zcl__64_1gad0e4c484d689dee3c5f1302fc80aef3e" kindref="member">ZCL64_IS_ZERO</ref>, <ref refid="group__zcl__64_1ga329900843c1e59c30b4bdff95ee594bd" kindref="member">ZCL64_EQ</ref>, <ref refid="group__zcl__64_1gaffa76b2bdfb8bc021db06efe331a2e5f" kindref="member">ZCL64_NE</ref>, ZCL64_CMP, ZCL64_UCMP </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="113" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1ga3ec91495319f42f4ba341768a10a77b7" prot="public" static="no">
        <name>ZCL64_LT</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>JSLL_REAL_CMP(a, &lt;, b)</initializer>
        <briefdescription>
<para>Compare two zcl64_t variables (signed less-than comparison) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>signed zcl64_t variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>signed zcl64_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(a &lt; b)</para></simplesect>
<simplesect kind="see"><para><ref refid="group__zcl__64_1gad0e4c484d689dee3c5f1302fc80aef3e" kindref="member">ZCL64_IS_ZERO</ref>, <ref refid="group__zcl__64_1ga329900843c1e59c30b4bdff95ee594bd" kindref="member">ZCL64_EQ</ref>, <ref refid="group__zcl__64_1gaffa76b2bdfb8bc021db06efe331a2e5f" kindref="member">ZCL64_NE</ref>, <ref refid="group__zcl__64_1ga524b42ba2596f4c0392780c540f5d5b6" kindref="member">ZCL64_GE_ZERO</ref>, <ref refid="group__zcl__64_1ga3ec91495319f42f4ba341768a10a77b7" kindref="member">ZCL64_LT</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="123" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="123" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1gaa6db62833f3681442d99ef64ef0ab61e" prot="public" static="no">
        <name>ZCL64_LTU</name>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>JSLL_REAL_UCMP(a, &lt;, b)</initializer>
        <briefdescription>
<para>Compare two zcl64_t variables (unsigned less-than comparison) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>unsigned zcl64_t variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>unsigned zcl64_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>(a &lt; b)</para></simplesect>
<simplesect kind="see"><para><ref refid="group__zcl__64_1gad0e4c484d689dee3c5f1302fc80aef3e" kindref="member">ZCL64_IS_ZERO</ref>, <ref refid="group__zcl__64_1ga329900843c1e59c30b4bdff95ee594bd" kindref="member">ZCL64_EQ</ref>, <ref refid="group__zcl__64_1gaffa76b2bdfb8bc021db06efe331a2e5f" kindref="member">ZCL64_NE</ref>, <ref refid="group__zcl__64_1ga524b42ba2596f4c0392780c540f5d5b6" kindref="member">ZCL64_GE_ZERO</ref>, <ref refid="group__zcl__64_1gaa6db62833f3681442d99ef64ef0ab61e" kindref="member">ZCL64_LTU</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="133" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="133" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1ga6f960291ee8e41a8a45421b0b27b62b9" prot="public" static="no">
        <name>ZCL64_AND</name>
        <param><defname>r</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>JSLL_AND(r, a, b)</initializer>
        <briefdescription>
<para>Perform a bitwise AND of two zcl64_t variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">r</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable to assign (a &amp; b) to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1gaa6e4aa82c20efd4b30cf9af31672d867" kindref="member">ZCL64_OR</ref>, <ref refid="group__zcl__64_1gaa6a22393c0d8c9d674b8a90d316413d3" kindref="member">ZCL64_XOR</ref>, <ref refid="group__zcl__64_1ga181c9c94509aa64c1c3c3ed74d6d3c0e" kindref="member">ZCL64_NOT</ref>, <ref refid="group__zcl__64_1gab197c8668c0287b8190982177e03a257" kindref="member">ZCL64_NEG</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="142" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="142" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1gaa6e4aa82c20efd4b30cf9af31672d867" prot="public" static="no">
        <name>ZCL64_OR</name>
        <param><defname>r</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>JSLL_OR(r, a, b)</initializer>
        <briefdescription>
<para>Perform a bitwise OR of two zcl64_t variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">r</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable to assign (a | b) to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1ga6f960291ee8e41a8a45421b0b27b62b9" kindref="member">ZCL64_AND</ref>, <ref refid="group__zcl__64_1gaa6a22393c0d8c9d674b8a90d316413d3" kindref="member">ZCL64_XOR</ref>, <ref refid="group__zcl__64_1ga181c9c94509aa64c1c3c3ed74d6d3c0e" kindref="member">ZCL64_NOT</ref>, <ref refid="group__zcl__64_1gab197c8668c0287b8190982177e03a257" kindref="member">ZCL64_NEG</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="151" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="151" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1gaa6a22393c0d8c9d674b8a90d316413d3" prot="public" static="no">
        <name>ZCL64_XOR</name>
        <param><defname>r</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>JSLL_XOR(r, a, b)</initializer>
        <briefdescription>
<para>Perform a bitwise XOR of two zcl64_t variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">r</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable to assign (a ^ b) to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1ga6f960291ee8e41a8a45421b0b27b62b9" kindref="member">ZCL64_AND</ref>, <ref refid="group__zcl__64_1gaa6e4aa82c20efd4b30cf9af31672d867" kindref="member">ZCL64_OR</ref>, <ref refid="group__zcl__64_1ga181c9c94509aa64c1c3c3ed74d6d3c0e" kindref="member">ZCL64_NOT</ref>, <ref refid="group__zcl__64_1gab197c8668c0287b8190982177e03a257" kindref="member">ZCL64_NEG</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="160" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="160" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1ga181c9c94509aa64c1c3c3ed74d6d3c0e" prot="public" static="no">
        <name>ZCL64_NOT</name>
        <param><defname>r</defname></param>
        <param><defname>a</defname></param>
        <initializer>JSLL_NOT(r, a)</initializer>
        <briefdescription>
<para>Perform a bitwise NOT of a zcl64_t variable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">r</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable to assign (~a) to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1ga6f960291ee8e41a8a45421b0b27b62b9" kindref="member">ZCL64_AND</ref>, <ref refid="group__zcl__64_1gaa6e4aa82c20efd4b30cf9af31672d867" kindref="member">ZCL64_OR</ref>, <ref refid="group__zcl__64_1gaa6a22393c0d8c9d674b8a90d316413d3" kindref="member">ZCL64_XOR</ref>, <ref refid="group__zcl__64_1gab197c8668c0287b8190982177e03a257" kindref="member">ZCL64_NEG</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="168" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="168" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1gab197c8668c0287b8190982177e03a257" prot="public" static="no">
        <name>ZCL64_NEG</name>
        <param><defname>r</defname></param>
        <param><defname>a</defname></param>
        <initializer>JSLL_NEG(r, a)</initializer>
        <briefdescription>
<para>Negate a zcl64_t variable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">r</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable to assign (-a) to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1ga6f960291ee8e41a8a45421b0b27b62b9" kindref="member">ZCL64_AND</ref>, <ref refid="group__zcl__64_1gaa6e4aa82c20efd4b30cf9af31672d867" kindref="member">ZCL64_OR</ref>, <ref refid="group__zcl__64_1gaa6a22393c0d8c9d674b8a90d316413d3" kindref="member">ZCL64_XOR</ref>, <ref refid="group__zcl__64_1ga181c9c94509aa64c1c3c3ed74d6d3c0e" kindref="member">ZCL64_NOT</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="176" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="176" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1gaa0b854087abee42e1bf908a133385f8d" prot="public" static="no">
        <name>ZCL64_ADD</name>
        <param><defname>r</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>JSLL_ADD(r, a, b)</initializer>
        <briefdescription>
<para>Add two zcl64_t variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">r</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable to assign (a + b) to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1ga949d0b35ec1e4bf3a9e8a422b0eae4e5" kindref="member">ZCL64_SUB</ref>, <ref refid="group__zcl__64_1ga3f163bcb1ecddc543b3a4f3bdbc1d413" kindref="member">ZCL64_MUL</ref>, <ref refid="group__zcl__64_1gadb0e1566e403716d94868b45bb8c63bb" kindref="member">ZCL64_MUL32</ref>, <ref refid="group__zcl__64_1ga6d2d3e13f94ca7fba869dbc6479ae0e1" kindref="member">ZCL64_UDIVMOD</ref>, <ref refid="group__zcl__64_1gada2c215933ee366c11da80a44c2b27c7" kindref="member">ZCL64_DIV</ref>, <ref refid="group__zcl__64_1ga8137418ffd91d5aae3b41a0143d27070" kindref="member">ZCL64_MOD</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="185" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1ga949d0b35ec1e4bf3a9e8a422b0eae4e5" prot="public" static="no">
        <name>ZCL64_SUB</name>
        <param><defname>r</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>JSLL_SUB(r, a, b)</initializer>
        <briefdescription>
<para>Subtract two zcl64_t variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">r</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable to assign (a - b) to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1gaa0b854087abee42e1bf908a133385f8d" kindref="member">ZCL64_ADD</ref>, <ref refid="group__zcl__64_1ga3f163bcb1ecddc543b3a4f3bdbc1d413" kindref="member">ZCL64_MUL</ref>, <ref refid="group__zcl__64_1gadb0e1566e403716d94868b45bb8c63bb" kindref="member">ZCL64_MUL32</ref>, <ref refid="group__zcl__64_1ga6d2d3e13f94ca7fba869dbc6479ae0e1" kindref="member">ZCL64_UDIVMOD</ref>, <ref refid="group__zcl__64_1gada2c215933ee366c11da80a44c2b27c7" kindref="member">ZCL64_DIV</ref>, <ref refid="group__zcl__64_1ga8137418ffd91d5aae3b41a0143d27070" kindref="member">ZCL64_MOD</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="194" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="194" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1ga3f163bcb1ecddc543b3a4f3bdbc1d413" prot="public" static="no">
        <name>ZCL64_MUL</name>
        <param><defname>r</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>JSLL_MUL(r, a, b)</initializer>
        <briefdescription>
<para>Multiply two zcl64_t variables. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">r</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable to assign (a * b) to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1gaa0b854087abee42e1bf908a133385f8d" kindref="member">ZCL64_ADD</ref>, <ref refid="group__zcl__64_1ga949d0b35ec1e4bf3a9e8a422b0eae4e5" kindref="member">ZCL64_SUB</ref>, <ref refid="group__zcl__64_1gadb0e1566e403716d94868b45bb8c63bb" kindref="member">ZCL64_MUL32</ref>, <ref refid="group__zcl__64_1ga6d2d3e13f94ca7fba869dbc6479ae0e1" kindref="member">ZCL64_UDIVMOD</ref>, <ref refid="group__zcl__64_1gada2c215933ee366c11da80a44c2b27c7" kindref="member">ZCL64_DIV</ref>, <ref refid="group__zcl__64_1ga8137418ffd91d5aae3b41a0143d27070" kindref="member">ZCL64_MOD</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="203" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="203" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1gadb0e1566e403716d94868b45bb8c63bb" prot="public" static="no">
        <name>ZCL64_MUL32</name>
        <param><defname>r</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>JSLL_MUL32(r, a, b)</initializer>
        <briefdescription>
<para>Multiply two 32-bit variables (int32_t or uint32_t) and store the result in a zcl64_t variable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">r</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable to assign (a * b) to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>uint32_t variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>uint32_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1gaa0b854087abee42e1bf908a133385f8d" kindref="member">ZCL64_ADD</ref>, <ref refid="group__zcl__64_1ga949d0b35ec1e4bf3a9e8a422b0eae4e5" kindref="member">ZCL64_SUB</ref>, <ref refid="group__zcl__64_1ga3f163bcb1ecddc543b3a4f3bdbc1d413" kindref="member">ZCL64_MUL</ref>, <ref refid="group__zcl__64_1ga6d2d3e13f94ca7fba869dbc6479ae0e1" kindref="member">ZCL64_UDIVMOD</ref>, <ref refid="group__zcl__64_1gada2c215933ee366c11da80a44c2b27c7" kindref="member">ZCL64_DIV</ref>, <ref refid="group__zcl__64_1ga8137418ffd91d5aae3b41a0143d27070" kindref="member">ZCL64_MOD</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="214" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="214" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1ga6d2d3e13f94ca7fba869dbc6479ae0e1" prot="public" static="no">
        <name>ZCL64_UDIVMOD</name>
        <param><defname>qp</defname></param>
        <param><defname>rp</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>JSLL_UDIVMOD(qp, rp, a, b)</initializer>
        <briefdescription>
<para>Divide an unsigned zcl64_t variable by another unsigned zcl64_t variable and store the 64-bit quotient and remainder. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">qp</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL to ignore the quotient, or address of a zcl64_t variable to assign (a / b) to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="out">rp</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL to ignore the remainder, or address of a zcl64_t variable to assign (a % b) to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1gaa0b854087abee42e1bf908a133385f8d" kindref="member">ZCL64_ADD</ref>, <ref refid="group__zcl__64_1ga949d0b35ec1e4bf3a9e8a422b0eae4e5" kindref="member">ZCL64_SUB</ref>, <ref refid="group__zcl__64_1ga3f163bcb1ecddc543b3a4f3bdbc1d413" kindref="member">ZCL64_MUL</ref>, <ref refid="group__zcl__64_1gadb0e1566e403716d94868b45bb8c63bb" kindref="member">ZCL64_MUL32</ref>, <ref refid="group__zcl__64_1gada2c215933ee366c11da80a44c2b27c7" kindref="member">ZCL64_DIV</ref>, <ref refid="group__zcl__64_1ga8137418ffd91d5aae3b41a0143d27070" kindref="member">ZCL64_MOD</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="228" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="228" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1gada2c215933ee366c11da80a44c2b27c7" prot="public" static="no">
        <name>ZCL64_DIV</name>
        <param><defname>r</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>JSLL_DIV(r, a, b)</initializer>
        <briefdescription>
<para>Perform signed division of two zcl64_t variables and store the quotient. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">r</parametername>
</parameternamelist>
<parameterdescription>
<para>signed zcl64_t variable to assign (a / b) to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>signed zcl64_t variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>signed zcl64_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1gaa0b854087abee42e1bf908a133385f8d" kindref="member">ZCL64_ADD</ref>, <ref refid="group__zcl__64_1ga949d0b35ec1e4bf3a9e8a422b0eae4e5" kindref="member">ZCL64_SUB</ref>, <ref refid="group__zcl__64_1ga3f163bcb1ecddc543b3a4f3bdbc1d413" kindref="member">ZCL64_MUL</ref>, <ref refid="group__zcl__64_1gadb0e1566e403716d94868b45bb8c63bb" kindref="member">ZCL64_MUL32</ref>, <ref refid="group__zcl__64_1ga6d2d3e13f94ca7fba869dbc6479ae0e1" kindref="member">ZCL64_UDIVMOD</ref>, <ref refid="group__zcl__64_1ga8137418ffd91d5aae3b41a0143d27070" kindref="member">ZCL64_MOD</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="243" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="243" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1ga8137418ffd91d5aae3b41a0143d27070" prot="public" static="no">
        <name>ZCL64_MOD</name>
        <param><defname>r</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>JSLL_MOD(r, a, b)</initializer>
        <briefdescription>
<para>Perform signed division of two zcl64_t variables and store the remainder. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">r</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable to assign (a + b) to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1gaa0b854087abee42e1bf908a133385f8d" kindref="member">ZCL64_ADD</ref>, <ref refid="group__zcl__64_1ga949d0b35ec1e4bf3a9e8a422b0eae4e5" kindref="member">ZCL64_SUB</ref>, <ref refid="group__zcl__64_1ga3f163bcb1ecddc543b3a4f3bdbc1d413" kindref="member">ZCL64_MUL</ref>, <ref refid="group__zcl__64_1gadb0e1566e403716d94868b45bb8c63bb" kindref="member">ZCL64_MUL32</ref>, <ref refid="group__zcl__64_1ga6d2d3e13f94ca7fba869dbc6479ae0e1" kindref="member">ZCL64_UDIVMOD</ref>, <ref refid="group__zcl__64_1gada2c215933ee366c11da80a44c2b27c7" kindref="member">ZCL64_DIV</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="253" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="253" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1ga1a1bb5cd5b871acf8dd49621073cbd41" prot="public" static="no">
        <name>ZCL64_ASL</name>
        <param><defname>r</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>JSLL_SHL(r, a, b)</initializer>
        <briefdescription>
<para>Arithmetic Shift Left of a zcl64_t variable. </para>        </briefdescription>
        <detaileddescription>
<para>Shifts bits of <computeroutput>a</computeroutput> left by <bold>positions</bold>, inserting zeros on the right. Equivalent to ZCL64_LSL. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">r</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable to assign (a &lt;&lt; b) to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>integral value from 0 to 63</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1ga6cc9903e90f4c3e3af0d5e4eef7c89a4" kindref="member">ZCL64_LSL</ref>, <ref refid="group__zcl__64_1gaffe142c28a6ecbe29416c4e0ba5f6a04" kindref="member">ZCL64_ASR</ref>, <ref refid="group__zcl__64_1ga389dd5298bd8f8574f55aa6a687f41a8" kindref="member">ZCL64_LSR</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="264" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="264" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1ga6cc9903e90f4c3e3af0d5e4eef7c89a4" prot="public" static="no">
        <name>ZCL64_LSL</name>
        <param><defname>r</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>ZCL64_SLA(r, a, b)</initializer>
        <briefdescription>
<para>Logical Shift Left of a zcl64_t variable. </para>        </briefdescription>
        <detaileddescription>
<para>Shifts bits of <computeroutput>a</computeroutput> left by <bold>positions</bold>, inserting zeros on the right. Equivalent to ZCL64_ASL. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">r</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable to assign (a &lt;&lt; b) to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>integral value from 0 to 63</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1ga1a1bb5cd5b871acf8dd49621073cbd41" kindref="member">ZCL64_ASL</ref>, <ref refid="group__zcl__64_1gaffe142c28a6ecbe29416c4e0ba5f6a04" kindref="member">ZCL64_ASR</ref>, <ref refid="group__zcl__64_1ga389dd5298bd8f8574f55aa6a687f41a8" kindref="member">ZCL64_LSR</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="275" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="275" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1gaffe142c28a6ecbe29416c4e0ba5f6a04" prot="public" static="no">
        <name>ZCL64_ASR</name>
        <param><defname>r</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>JSLL_SHR(r, a, b)</initializer>
        <briefdescription>
<para>Arithmetic Shift Right of a signed zcl64_t variable. </para>        </briefdescription>
        <detaileddescription>
<para>Shifts bits of <computeroutput>a</computeroutput> right by <bold>positions</bold>, extending the sign bit on the left. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">r</parametername>
</parameternamelist>
<parameterdescription>
<para>signed zcl64_t variable to assign (a &gt;&gt; b) to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>signed zcl64_t variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>integral value from 0 to 63</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1ga1a1bb5cd5b871acf8dd49621073cbd41" kindref="member">ZCL64_ASL</ref>, <ref refid="group__zcl__64_1ga6cc9903e90f4c3e3af0d5e4eef7c89a4" kindref="member">ZCL64_LSL</ref>, <ref refid="group__zcl__64_1ga389dd5298bd8f8574f55aa6a687f41a8" kindref="member">ZCL64_LSR</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="286" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="286" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1ga389dd5298bd8f8574f55aa6a687f41a8" prot="public" static="no">
        <name>ZCL64_LSR</name>
        <param><defname>r</defname></param>
        <param><defname>a</defname></param>
        <param><defname>b</defname></param>
        <initializer>JSLL_USHR(r, a, b)</initializer>
        <briefdescription>
<para>Logical Shift Right of an unsigned zcl64_t variable. </para>        </briefdescription>
        <detaileddescription>
<para>Shifts bits of <computeroutput>a</computeroutput> right by <bold>positions</bold>, inserting zeros on the left. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">r</parametername>
</parameternamelist>
<parameterdescription>
<para>unsigned zcl64_t variable to assign (a &gt;&gt; b) to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">a</parametername>
</parameternamelist>
<parameterdescription>
<para>unsigned zcl64_t variable </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">b</parametername>
</parameternamelist>
<parameterdescription>
<para>integral value from 0 to 63</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1ga1a1bb5cd5b871acf8dd49621073cbd41" kindref="member">ZCL64_ASL</ref>, <ref refid="group__zcl__64_1ga6cc9903e90f4c3e3af0d5e4eef7c89a4" kindref="member">ZCL64_LSL</ref>, <ref refid="group__zcl__64_1gaffe142c28a6ecbe29416c4e0ba5f6a04" kindref="member">ZCL64_ASR</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="297" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="297" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1gaceb8fdf41f4dc532f6028bab90521d3e" prot="public" static="no">
        <name>ZCL64_TO_INT32</name>
        <param><defname>i32</defname></param>
        <param><defname>i64</defname></param>
        <initializer>JSLL_L2I(i32, i64)</initializer>
        <briefdescription>
<para>Cast a signed zcl64_t variable down to a signed 32-bit integer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">i32</parametername>
</parameternamelist>
<parameterdescription>
<para>int32_t variable to cast <computeroutput>i64</computeroutput> into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">i64</parametername>
</parameternamelist>
<parameterdescription>
<para>signed zcl64_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1ga628915c271405b5eaeb673089f0df6ba" kindref="member">ZCL64_TO_UINT32</ref>, <ref refid="group__zcl__64_1ga3f09d28af6abe1a4a5c427ea93686ea1" kindref="member">ZCL64_TO_FLOAT</ref>, <ref refid="group__zcl__64_1ga3cca4ebbc7fafb30919421d7cd0a2d73" kindref="member">ZCL64_TO_DOUBLE</ref>, <ref refid="group__zcl__64_1gafe6c7cf76cbba5ac7fb5329fd0801278" kindref="member">ZCL64_FROM_INT32</ref>, <ref refid="group__zcl__64_1gaae113edcbf898afca39e88d742c27f8d" kindref="member">ZCL64_FROM_UINT32</ref>, <ref refid="group__zcl__64_1gaae1ff05a93a54da4e06bbca682d2c548" kindref="member">ZCL64_FROM_FLOAT</ref>, <ref refid="group__zcl__64_1ga1899e4fdd99e7f07bf5044997a40e248" kindref="member">ZCL64_FROM_DOUBLE</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="309" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="309" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1ga628915c271405b5eaeb673089f0df6ba" prot="public" static="no">
        <name>ZCL64_TO_UINT32</name>
        <param><defname>u32</defname></param>
        <param><defname>u64</defname></param>
        <initializer>JSLL_L2UI(u32, u64)</initializer>
        <briefdescription>
<para>Cast an unsigned zcl64_t variable down to an unsigned 32-bit integer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">u32</parametername>
</parameternamelist>
<parameterdescription>
<para>uint32_t variable to cast <computeroutput>u64</computeroutput> into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">u64</parametername>
</parameternamelist>
<parameterdescription>
<para>unsigned zcl64_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1gaceb8fdf41f4dc532f6028bab90521d3e" kindref="member">ZCL64_TO_INT32</ref>, <ref refid="group__zcl__64_1ga3f09d28af6abe1a4a5c427ea93686ea1" kindref="member">ZCL64_TO_FLOAT</ref>, <ref refid="group__zcl__64_1ga3cca4ebbc7fafb30919421d7cd0a2d73" kindref="member">ZCL64_TO_DOUBLE</ref>, <ref refid="group__zcl__64_1gafe6c7cf76cbba5ac7fb5329fd0801278" kindref="member">ZCL64_FROM_INT32</ref>, <ref refid="group__zcl__64_1gaae113edcbf898afca39e88d742c27f8d" kindref="member">ZCL64_FROM_UINT32</ref>, <ref refid="group__zcl__64_1gaae1ff05a93a54da4e06bbca682d2c548" kindref="member">ZCL64_FROM_FLOAT</ref>, <ref refid="group__zcl__64_1ga1899e4fdd99e7f07bf5044997a40e248" kindref="member">ZCL64_FROM_DOUBLE</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="318" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1gafa2d05dfa497827d3f232698f5f47c2b" prot="public" static="no">
        <name>ZCL64_LOW32</name>
        <param><defname>u64</defname></param>
        <initializer>((u64).lo)</initializer>
        <briefdescription>
<para>The lower-32 bits of a ZCL64 value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">u64</parametername>
</parameternamelist>
<parameterdescription>
<para>unsigned zcl64_t variable </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="327" column="11" bodyfile="include/zigbee/zcl64.h" bodystart="327" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1ga6a24898481f0fe419858c8b51cafda3e" prot="public" static="no">
        <name>ZCL64_HIGH32</name>
        <param><defname>u64</defname></param>
        <initializer>((u64).hi)</initializer>
        <briefdescription>
<para>The upper-32 bits of a ZCL64 value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">u64</parametername>
</parameternamelist>
<parameterdescription>
<para>unsigned zcl64_t variable </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="337" column="11" bodyfile="include/zigbee/zcl64.h" bodystart="337" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1ga3f09d28af6abe1a4a5c427ea93686ea1" prot="public" static="no">
        <name>ZCL64_TO_FLOAT</name>
        <param><defname>f</defname></param>
        <param><defname>i64</defname></param>
        <initializer>JSLL_L2F(f, i64)</initializer>
        <briefdescription>
<para>Cast a signed zcl64_t variable to a <computeroutput>float</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">f</parametername>
</parameternamelist>
<parameterdescription>
<para>float variable to cast <computeroutput>i64</computeroutput> into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">i64</parametername>
</parameternamelist>
<parameterdescription>
<para>signed zcl64_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1gaceb8fdf41f4dc532f6028bab90521d3e" kindref="member">ZCL64_TO_INT32</ref>, <ref refid="group__zcl__64_1ga628915c271405b5eaeb673089f0df6ba" kindref="member">ZCL64_TO_UINT32</ref>, <ref refid="group__zcl__64_1ga3cca4ebbc7fafb30919421d7cd0a2d73" kindref="member">ZCL64_TO_DOUBLE</ref>, <ref refid="group__zcl__64_1gafe6c7cf76cbba5ac7fb5329fd0801278" kindref="member">ZCL64_FROM_INT32</ref>, <ref refid="group__zcl__64_1gaae113edcbf898afca39e88d742c27f8d" kindref="member">ZCL64_FROM_UINT32</ref>, <ref refid="group__zcl__64_1gaae1ff05a93a54da4e06bbca682d2c548" kindref="member">ZCL64_FROM_FLOAT</ref>, <ref refid="group__zcl__64_1ga1899e4fdd99e7f07bf5044997a40e248" kindref="member">ZCL64_FROM_DOUBLE</ref>, </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="347" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="347" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1ga3cca4ebbc7fafb30919421d7cd0a2d73" prot="public" static="no">
        <name>ZCL64_TO_DOUBLE</name>
        <param><defname>d</defname></param>
        <param><defname>i64</defname></param>
        <initializer>JSLL_L2D(d, i64)</initializer>
        <briefdescription>
<para>Cast a signed zcl64_t variable to a <computeroutput>double</computeroutput>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">d</parametername>
</parameternamelist>
<parameterdescription>
<para>double variable to cast <computeroutput>i64</computeroutput> into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">i64</parametername>
</parameternamelist>
<parameterdescription>
<para>signed zcl64_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1gaceb8fdf41f4dc532f6028bab90521d3e" kindref="member">ZCL64_TO_INT32</ref>, <ref refid="group__zcl__64_1ga628915c271405b5eaeb673089f0df6ba" kindref="member">ZCL64_TO_UINT32</ref>, <ref refid="group__zcl__64_1ga3f09d28af6abe1a4a5c427ea93686ea1" kindref="member">ZCL64_TO_FLOAT</ref>, <ref refid="group__zcl__64_1gafe6c7cf76cbba5ac7fb5329fd0801278" kindref="member">ZCL64_FROM_INT32</ref>, <ref refid="group__zcl__64_1gaae113edcbf898afca39e88d742c27f8d" kindref="member">ZCL64_FROM_UINT32</ref>, <ref refid="group__zcl__64_1gaae1ff05a93a54da4e06bbca682d2c548" kindref="member">ZCL64_FROM_FLOAT</ref>, <ref refid="group__zcl__64_1ga1899e4fdd99e7f07bf5044997a40e248" kindref="member">ZCL64_FROM_DOUBLE</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="356" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="356" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1gafe6c7cf76cbba5ac7fb5329fd0801278" prot="public" static="no">
        <name>ZCL64_FROM_INT32</name>
        <param><defname>i64</defname></param>
        <param><defname>i32</defname></param>
        <initializer>JSLL_I2L(i64, i32)</initializer>
        <briefdescription>
<para>Cast a signed 32-bit integer up to a zcl64_t variable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">i64</parametername>
</parameternamelist>
<parameterdescription>
<para>signed zcl64_t variable to cast <computeroutput>i32</computeroutput> into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">i32</parametername>
</parameternamelist>
<parameterdescription>
<para>int32_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1gaceb8fdf41f4dc532f6028bab90521d3e" kindref="member">ZCL64_TO_INT32</ref>, <ref refid="group__zcl__64_1ga628915c271405b5eaeb673089f0df6ba" kindref="member">ZCL64_TO_UINT32</ref>, <ref refid="group__zcl__64_1ga3f09d28af6abe1a4a5c427ea93686ea1" kindref="member">ZCL64_TO_FLOAT</ref>, <ref refid="group__zcl__64_1ga3cca4ebbc7fafb30919421d7cd0a2d73" kindref="member">ZCL64_TO_DOUBLE</ref>, <ref refid="group__zcl__64_1gaae113edcbf898afca39e88d742c27f8d" kindref="member">ZCL64_FROM_UINT32</ref>, <ref refid="group__zcl__64_1gaae1ff05a93a54da4e06bbca682d2c548" kindref="member">ZCL64_FROM_FLOAT</ref>, <ref refid="group__zcl__64_1ga1899e4fdd99e7f07bf5044997a40e248" kindref="member">ZCL64_FROM_DOUBLE</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="366" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="366" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1gaae113edcbf898afca39e88d742c27f8d" prot="public" static="no">
        <name>ZCL64_FROM_UINT32</name>
        <param><defname>u64</defname></param>
        <param><defname>u32</defname></param>
        <initializer>JSLL_UI2L(u64, u32)</initializer>
        <briefdescription>
<para>Cast an unsigned 32-bit integer up to a zcl64_t variable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">u64</parametername>
</parameternamelist>
<parameterdescription>
<para>unsigned zcl64_t variable to cast <computeroutput>u32</computeroutput> into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">u32</parametername>
</parameternamelist>
<parameterdescription>
<para>uint32_t variable</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1gaceb8fdf41f4dc532f6028bab90521d3e" kindref="member">ZCL64_TO_INT32</ref>, <ref refid="group__zcl__64_1ga628915c271405b5eaeb673089f0df6ba" kindref="member">ZCL64_TO_UINT32</ref>, <ref refid="group__zcl__64_1ga3f09d28af6abe1a4a5c427ea93686ea1" kindref="member">ZCL64_TO_FLOAT</ref>, <ref refid="group__zcl__64_1ga3cca4ebbc7fafb30919421d7cd0a2d73" kindref="member">ZCL64_TO_DOUBLE</ref>, <ref refid="group__zcl__64_1gafe6c7cf76cbba5ac7fb5329fd0801278" kindref="member">ZCL64_FROM_INT32</ref>, <ref refid="group__zcl__64_1gaae1ff05a93a54da4e06bbca682d2c548" kindref="member">ZCL64_FROM_FLOAT</ref>, <ref refid="group__zcl__64_1ga1899e4fdd99e7f07bf5044997a40e248" kindref="member">ZCL64_FROM_DOUBLE</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="375" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="375" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1gaae1ff05a93a54da4e06bbca682d2c548" prot="public" static="no">
        <name>ZCL64_FROM_FLOAT</name>
        <param><defname>i64</defname></param>
        <param><defname>f</defname></param>
        <initializer>JSLL_F2L(i64, f)</initializer>
        <briefdescription>
<para>Cast a <computeroutput>double</computeroutput> into a signed zcl64_t variable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">i64</parametername>
</parameternamelist>
<parameterdescription>
<para>signed zcl64_t variable to cast <computeroutput>f</computeroutput> into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">f</parametername>
</parameternamelist>
<parameterdescription>
<para>float variable/value</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1gaceb8fdf41f4dc532f6028bab90521d3e" kindref="member">ZCL64_TO_INT32</ref>, <ref refid="group__zcl__64_1ga628915c271405b5eaeb673089f0df6ba" kindref="member">ZCL64_TO_UINT32</ref>, <ref refid="group__zcl__64_1ga3f09d28af6abe1a4a5c427ea93686ea1" kindref="member">ZCL64_TO_FLOAT</ref>, <ref refid="group__zcl__64_1ga3cca4ebbc7fafb30919421d7cd0a2d73" kindref="member">ZCL64_TO_DOUBLE</ref>, <ref refid="group__zcl__64_1gafe6c7cf76cbba5ac7fb5329fd0801278" kindref="member">ZCL64_FROM_INT32</ref>, <ref refid="group__zcl__64_1gaae113edcbf898afca39e88d742c27f8d" kindref="member">ZCL64_FROM_UINT32</ref>, <ref refid="group__zcl__64_1ga1899e4fdd99e7f07bf5044997a40e248" kindref="member">ZCL64_FROM_DOUBLE</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="384" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="384" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1ga1899e4fdd99e7f07bf5044997a40e248" prot="public" static="no">
        <name>ZCL64_FROM_DOUBLE</name>
        <param><defname>i64</defname></param>
        <param><defname>d</defname></param>
        <initializer>JSLL_D2L(i64, d)</initializer>
        <briefdescription>
<para>Cast a <computeroutput>float</computeroutput> into a signed zcl64_t variable. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">i64</parametername>
</parameternamelist>
<parameterdescription>
<para>signed zcl64_t variable to cast <computeroutput>d</computeroutput> into </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">d</parametername>
</parameternamelist>
<parameterdescription>
<para>double variable/value</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1gaceb8fdf41f4dc532f6028bab90521d3e" kindref="member">ZCL64_TO_INT32</ref>, <ref refid="group__zcl__64_1ga628915c271405b5eaeb673089f0df6ba" kindref="member">ZCL64_TO_UINT32</ref>, <ref refid="group__zcl__64_1ga3f09d28af6abe1a4a5c427ea93686ea1" kindref="member">ZCL64_TO_FLOAT</ref>, <ref refid="group__zcl__64_1ga3cca4ebbc7fafb30919421d7cd0a2d73" kindref="member">ZCL64_TO_DOUBLE</ref>, <ref refid="group__zcl__64_1gafe6c7cf76cbba5ac7fb5329fd0801278" kindref="member">ZCL64_FROM_INT32</ref>, <ref refid="group__zcl__64_1gaae113edcbf898afca39e88d742c27f8d" kindref="member">ZCL64_FROM_UINT32</ref>, <ref refid="group__zcl__64_1gaae1ff05a93a54da4e06bbca682d2c548" kindref="member">ZCL64_FROM_FLOAT</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="393" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="393" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1ga24b0de907d96815f51558733e99792d3" prot="public" static="no">
        <name>ZCL64_TO_HEXSTR</name>
        <param><defname>buffer</defname></param>
        <param><defname>var</defname></param>
        <initializer>JSLL_HEXSTR(buffer, var)</initializer>
        <briefdescription>
<para>Convert a zcl64_t variable to a 16-character printable hexadecimal string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>17-character buffer to hold hexadecimal string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">var</parametername>
</parameternamelist>
<parameterdescription>
<para>zcl64_t variable to stringify</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>16</parametername>
</parameternamelist>
<parameterdescription>
<para>this function always returns 16, the number of characters written to <computeroutput>buffer</computeroutput> (in addition to the null terminator)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__zcl__64_1gae93bf21431b64dcc3d9bcd67296ff0ed" kindref="member">ZCL64_TO_DECSTR</ref>, <ref refid="group__zcl__64_1gae094f7c19dcfd18917b426a9e43aa427" kindref="member">ZCL64_TO_UDECSTR</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="408" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="408" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1gae93bf21431b64dcc3d9bcd67296ff0ed" prot="public" static="no">
        <name>ZCL64_TO_DECSTR</name>
        <param><defname>buffer</defname></param>
        <param><defname>var</defname></param>
        <initializer>JSLL_DECSTR(buffer, var)</initializer>
        <briefdescription>
<para>Convert a signed zcl64_t variable to a 20-character printable decimal string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>21-character buffer to hold hexadecimal string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">var</parametername>
</parameternamelist>
<parameterdescription>
<para>signed zcl64_t variable to stringify</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of characters written to <computeroutput>buffer</computeroutput> (1 to 20), in addition to the null terminator</para></simplesect>
<simplesect kind="see"><para><ref refid="group__zcl__64_1ga24b0de907d96815f51558733e99792d3" kindref="member">ZCL64_TO_HEXSTR</ref>, <ref refid="group__zcl__64_1gae094f7c19dcfd18917b426a9e43aa427" kindref="member">ZCL64_TO_UDECSTR</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="421" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="421" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__zcl__64_1gae094f7c19dcfd18917b426a9e43aa427" prot="public" static="no">
        <name>ZCL64_TO_UDECSTR</name>
        <param><defname>buffer</defname></param>
        <param><defname>var</defname></param>
        <initializer>JSLL_UDECSTR(buffer, var)</initializer>
        <briefdescription>
<para>Convert an unsigned zcl64_t variable to a 20-character printable decimal string. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>21-character buffer to hold hexadecimal string </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">var</parametername>
</parameternamelist>
<parameterdescription>
<para>unsigned zcl64_t variable to stringify</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>number of characters written to <computeroutput>buffer</computeroutput> (1 to 20), in addition to the null terminator</para></simplesect>
<simplesect kind="see"><para><ref refid="group__zcl__64_1ga24b0de907d96815f51558733e99792d3" kindref="member">ZCL64_TO_HEXSTR</ref>, <ref refid="group__zcl__64_1gae93bf21431b64dcc3d9bcd67296ff0ed" kindref="member">ZCL64_TO_DECSTR</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl64.h" line="434" column="9" bodyfile="include/zigbee/zcl64.h" bodystart="434" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
