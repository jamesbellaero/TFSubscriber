<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__wpan__types" kind="group">
    <compoundname>wpan_types</compoundname>
    <title>Datatypes and support functions</title>
    <innerfile refid="wpan__types_8c">wpan_types.c</innerfile>
    <innerfile refid="types_8h">types.h</innerfile>
    <innerclass refid="unionaddr64" prot="public">addr64</innerclass>
    <innerclass refid="structwpan__address__t" prot="public">wpan_address_t</innerclass>
      <sectiondef kind="user-defined">
      <header>Reserved/Special WPAN network (16-bit) addresses</header>
      <memberdef kind="define" id="group__wpan__types_1ga6865088a83d5dbd67d9185fbe0d25063" prot="public" static="no">
        <name>WPAN_NET_ADDR_BCAST_ALL_NODES</name>
        <initializer>0xFFFF</initializer>
        <briefdescription>
<para>network broadcast address for all nodes </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wpan/types.h" line="61" column="9" bodyfile="include/wpan/types.h" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__wpan__types_1ga08ec03f67d0d74ba6f98da543baee129" prot="public" static="no">
        <name>WPAN_NET_ADDR_BCAST_NOT_ASLEEP</name>
        <initializer>0xFFFD</initializer>
        <briefdescription>
<para>network broadcast address for non-sleeping devices </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wpan/types.h" line="63" column="9" bodyfile="include/wpan/types.h" bodystart="63" bodyend="-1"/>
        <referencedby refid="group__zcl__client_1ga4c75937cc0fa5c70c63f30b59a4ddebc" compoundref="zcl__client_8c" startline="334" endline="402">zdo_send_match_desc</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__wpan__types_1gabc1252917f345a50aa97f991bb7a3685" prot="public" static="no">
        <name>WPAN_NET_ADDR_BCAST_ROUTERS</name>
        <initializer>0xFFFC</initializer>
        <briefdescription>
<para>network broadcast address for all routers (and coordinators) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wpan/types.h" line="65" column="9" bodyfile="include/wpan/types.h" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__wpan__types_1ga1674d7b825e528a482725d1c06b02c10" prot="public" static="no">
        <name>WPAN_NET_ADDR_UNDEFINED</name>
        <initializer>0xFFFE</initializer>
        <briefdescription>
<para>used to indicate 64-bit addressing (16-bit address is ignored) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wpan/types.h" line="68" column="9" bodyfile="include/wpan/types.h" bodystart="68" bodyend="-1"/>
        <referencedby refid="group__xbee__ota__client_1ga88905a78517417dd42f6356038717d01" compoundref="xbee__ota__client_8c" startline="119" endline="154">_xbee_ota_xmodem_write</referencedby>
        <referencedby refid="group__xbee__ota__client_1ga4805b029d840b86133ef62d64866c6af" compoundref="xbee__ota__client_8c" startline="157" endline="211">xbee_ota_init</referencedby>
        <referencedby refid="group__zcl__client_1ga4c75937cc0fa5c70c63f30b59a4ddebc" compoundref="zcl__client_8c" startline="334" endline="402">zdo_send_match_desc</referencedby>
        <referencedby refid="group__zdo_1gae4b6736d215caf2a10790761ed52443d" compoundref="zigbee__zdo_8c" startline="110" endline="139">_zdo_envelope_create</referencedby>
        <referencedby refid="group__zdo_1gaa70aa4bcb14a98c69e7a54a9971ea194" compoundref="zigbee__zdo_8c" startline="526" endline="637">_zdo_simple_desc_respond</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__wpan__types_1ga5158cbab6c4139bd77d1d3f80d9071b2" prot="public" static="no">
        <name>WPAN_NET_ADDR_COORDINATOR</name>
        <initializer>0x0000</initializer>
        <briefdescription>
<para>network coordinator always uses network address 0x0000 </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wpan/types.h" line="71" column="9" bodyfile="include/wpan/types.h" bodystart="71" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="user-defined">
      <header>Reserved/Special WPAN MAC (64-bit) addresses</header>
      <memberdef kind="variable" id="group__wpan__types_1gaaa2d876b00a2f300e24f1077e17dcb76" prot="public" static="no" mutable="no">
        <type>const <ref refid="unionaddr64" kindref="compound">addr64</ref></type>
        <definition>const addr64 _WPAN_IEEE_ADDR_UNDEFINED</definition>
        <argsstring></argsstring>
        <name>_WPAN_IEEE_ADDR_UNDEFINED</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal><para>address pointed to by macro <ref refid="group__wpan__types_1ga09e965ef6cfbfd48312d86bb011f125b" kindref="member">WPAN_IEEE_ADDR_UNDEFINED</ref> </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wpan/types.h" line="80" column="1" bodyfile="src/wpan/wpan_types.c" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wpan__types_1ga83c0da7da25848a435da46b80fb70933" prot="public" static="no" mutable="no">
        <type>const <ref refid="unionaddr64" kindref="compound">addr64</ref></type>
        <definition>const addr64 _WPAN_IEEE_ADDR_BROADCAST</definition>
        <argsstring></argsstring>
        <name>_WPAN_IEEE_ADDR_BROADCAST</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal><para>address pointed to by macro <ref refid="group__wpan__types_1gaced36f5538c5bb2da4f60a90313f1674" kindref="member">WPAN_IEEE_ADDR_BROADCAST</ref> </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wpan/types.h" line="84" column="1" bodyfile="src/wpan/wpan_types.c" bodystart="36" bodyend="-1"/>
        <referencedby refid="group__zcl__client_1ga4c75937cc0fa5c70c63f30b59a4ddebc" compoundref="zcl__client_8c" startline="334" endline="402">zdo_send_match_desc</referencedby>
      </memberdef>
      <memberdef kind="variable" id="group__wpan__types_1gac6bb0830c58428d2789507a23ab9fcdd" prot="public" static="no" mutable="no">
        <type>const <ref refid="unionaddr64" kindref="compound">addr64</ref></type>
        <definition>const addr64 _WPAN_IEEE_ADDR_COORDINATOR</definition>
        <argsstring></argsstring>
        <name>_WPAN_IEEE_ADDR_COORDINATOR</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal><para>address pointed to by macro <ref refid="group__wpan__types_1ga816199ef85ef801e07ae48350664034d" kindref="member">WPAN_IEEE_ADDR_COORDINATOR</ref> </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wpan/types.h" line="89" column="1" bodyfile="src/wpan/wpan_types.c" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__wpan__types_1ga09e965ef6cfbfd48312d86bb011f125b" prot="public" static="no">
        <name>WPAN_IEEE_ADDR_UNDEFINED</name>
        <initializer>(&amp;<ref refid="group__wpan__types_1gaaa2d876b00a2f300e24f1077e17dcb76" kindref="member">_WPAN_IEEE_ADDR_UNDEFINED</ref>)</initializer>
        <briefdescription>
<para>Pointer to <computeroutput><ref refid="unionaddr64" kindref="compound">addr64</ref></computeroutput> representing an undefined IEEE address (all ones). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wpan/types.h" line="79" column="9" bodyfile="include/wpan/types.h" bodystart="79" bodyend="-1"/>
        <referencedby refid="group__zdo_1ga4af5f8d70054f7883dbc1305e3a3f181" compoundref="zigbee__zdo_8c" startline="1134" endline="1173">zdo_send_ieee_addr_req</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__wpan__types_1gaced36f5538c5bb2da4f60a90313f1674" prot="public" static="no">
        <name>WPAN_IEEE_ADDR_BROADCAST</name>
        <initializer>(&amp;<ref refid="group__wpan__types_1ga83c0da7da25848a435da46b80fb70933" kindref="member">_WPAN_IEEE_ADDR_BROADCAST</ref>)</initializer>
        <briefdescription>
<para>Pointer to <computeroutput><ref refid="unionaddr64" kindref="compound">addr64</ref></computeroutput> representing the broadcast IEEE address. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wpan/types.h" line="83" column="9" bodyfile="include/wpan/types.h" bodystart="83" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__wpan__types_1ga816199ef85ef801e07ae48350664034d" prot="public" static="no">
        <name>WPAN_IEEE_ADDR_COORDINATOR</name>
        <initializer>(&amp;<ref refid="group__wpan__types_1gac6bb0830c58428d2789507a23ab9fcdd" kindref="member">_WPAN_IEEE_ADDR_COORDINATOR</ref>)</initializer>
        <briefdescription>
<para>Pointer to <computeroutput><ref refid="unionaddr64" kindref="compound">addr64</ref></computeroutput> representing the coordinator&apos;s IEEE adddress (all zeros). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wpan/types.h" line="88" column="9" bodyfile="include/wpan/types.h" bodystart="88" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__wpan__types_1ga014f9d0857312b6a7f80ee10ecfd0935" prot="public" static="no">
        <name>WPAN_IEEE_ADDR_ALL_ZEROS</name>
        <initializer>(&amp;<ref refid="group__wpan__types_1gac6bb0830c58428d2789507a23ab9fcdd" kindref="member">_WPAN_IEEE_ADDR_COORDINATOR</ref>)</initializer>
        <briefdescription>
<para>Pointer to <computeroutput><ref refid="unionaddr64" kindref="compound">addr64</ref></computeroutput> of all zeros. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="see"><para><ref refid="group__wpan__types_1ga9795dea7f415ceb7502f39a78ebadfc1" kindref="member">addr64_is_zero</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wpan/types.h" line="93" column="9" bodyfile="include/wpan/types.h" bodystart="93" bodyend="-1"/>
        <referencedby refid="group__zdo_1gae4b6736d215caf2a10790761ed52443d" compoundref="zigbee__zdo_8c" startline="110" endline="139">_zdo_envelope_create</referencedby>
        <referencedby refid="group__wpan__types_1ga500b175732df9779b3670e2ba1402530" compoundref="wpan__types_8c" startline="186" endline="229">addr64_parse</referencedby>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__wpan__types_1gaaa2d876b00a2f300e24f1077e17dcb76" prot="public" static="no" mutable="no">
        <type>const <ref refid="unionaddr64" kindref="compound">addr64</ref></type>
        <definition>const addr64 _WPAN_IEEE_ADDR_UNDEFINED</definition>
        <argsstring></argsstring>
        <name>_WPAN_IEEE_ADDR_UNDEFINED</name>
        <initializer>=
								{ { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF } }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal><para>address pointed to by macro <ref refid="group__wpan__types_1ga09e965ef6cfbfd48312d86bb011f125b" kindref="member">WPAN_IEEE_ADDR_UNDEFINED</ref> </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wpan/wpan_types.c" line="30" column="1" bodyfile="src/wpan/wpan_types.c" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wpan__types_1ga83c0da7da25848a435da46b80fb70933" prot="public" static="no" mutable="no">
        <type>const <ref refid="unionaddr64" kindref="compound">addr64</ref></type>
        <definition>const addr64 _WPAN_IEEE_ADDR_BROADCAST</definition>
        <argsstring></argsstring>
        <name>_WPAN_IEEE_ADDR_BROADCAST</name>
        <initializer>=
								{ { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF } }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal><para>address pointed to by macro <ref refid="group__wpan__types_1gaced36f5538c5bb2da4f60a90313f1674" kindref="member">WPAN_IEEE_ADDR_BROADCAST</ref> </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wpan/wpan_types.c" line="36" column="1" bodyfile="src/wpan/wpan_types.c" bodystart="36" bodyend="-1"/>
        <referencedby refid="group__zcl__client_1ga4c75937cc0fa5c70c63f30b59a4ddebc" compoundref="zcl__client_8c" startline="334" endline="402">zdo_send_match_desc</referencedby>
      </memberdef>
      <memberdef kind="variable" id="group__wpan__types_1gac6bb0830c58428d2789507a23ab9fcdd" prot="public" static="no" mutable="no">
        <type>const <ref refid="unionaddr64" kindref="compound">addr64</ref></type>
        <definition>const addr64 _WPAN_IEEE_ADDR_COORDINATOR</definition>
        <argsstring></argsstring>
        <name>_WPAN_IEEE_ADDR_COORDINATOR</name>
        <initializer>=
								{ { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal><para>address pointed to by macro <ref refid="group__wpan__types_1ga816199ef85ef801e07ae48350664034d" kindref="member">WPAN_IEEE_ADDR_COORDINATOR</ref> </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wpan/wpan_types.c" line="42" column="1" bodyfile="src/wpan/wpan_types.c" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wpan__types_1ga4892413ffe70d9782fc226d3512c6cd1" prot="public" static="no" mutable="no">
        <type><ref refid="group__hal__dos_1gae1affc9ca37cfb624959c866a73f83c2" kindref="member">uint8_t</ref></type>
        <definition>uint8_t b[8]</definition>
        <argsstring>[8]</argsstring>
        <name>b</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wpan/types.h" line="35" column="1" bodyfile="include/wpan/types.h" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wpan__types_1ga14b257b19e277f41d86cef4c28a5a9b9" prot="public" static="no" mutable="no">
        <type><ref refid="group__hal__dos_1ga5a8b2dc9e45a9ee81a94ef304fb62505" kindref="member">uint16_t</ref></type>
        <definition>uint16_t u[4]</definition>
        <argsstring>[4]</argsstring>
        <name>u</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wpan/types.h" line="36" column="1" bodyfile="include/wpan/types.h" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wpan__types_1ga190ad535f282ae870446f52f11bb8e8c" prot="public" static="no" mutable="no">
        <type><ref refid="group__hal__dos_1ga09a1e304d66d35dd47daffee9731edaa" kindref="member">uint32_t</ref></type>
        <definition>uint32_t l[2]</definition>
        <argsstring>[2]</argsstring>
        <name>l</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wpan/types.h" line="37" column="1" bodyfile="include/wpan/types.h" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wpan__types_1ga57d831abe873357609a3fce445ac09c0" prot="public" static="no" mutable="no">
        <type><ref refid="unionaddr64" kindref="compound">addr64</ref></type>
        <definition>addr64 ieee</definition>
        <argsstring></argsstring>
        <name>ieee</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wpan/types.h" line="99" column="1" bodyfile="include/wpan/types.h" bodystart="99" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wpan__types_1ga8389ac73067c5366c166e34801bf95c4" prot="public" static="no" mutable="no">
        <type><ref refid="group__hal__dos_1ga5a8b2dc9e45a9ee81a94ef304fb62505" kindref="member">uint16_t</ref></type>
        <definition>uint16_t network</definition>
        <argsstring></argsstring>
        <name>network</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wpan/types.h" line="100" column="1" bodyfile="include/wpan/types.h" bodystart="100" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__wpan__types_1ga448782f4aed0821758969b47221417ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char <ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref> *</type>
        <definition>char FAR * addr64_format</definition>
        <argsstring>(char FAR *buffer, const addr64 FAR *address)</argsstring>
        <name>addr64_format</name>
        <param>
          <type>char <ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>const <ref refid="unionaddr64" kindref="compound">addr64</ref> <ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref> *</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Format a 64-bit address as a null-terminated, printable string (e.g., &quot;00-13-A2-01-23-45-67&quot;). </para>        </briefdescription>
        <detaileddescription>
<para>If the first two bytes are 0x00, assume a 48-bit MAC address and format as 00-40-9D-01-23-45.</para><para>To change the default separator (&apos;-&apos;), define ADDR64_FORMAT_SEPARATOR to any character. For example:</para><para>#define ADDR64_FORMAT_SEPARATOR &apos;:&apos;</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a buffer of at least <ref refid="group__wpan__types_1gac468b40b060897498f923923654c3d4a" kindref="member">ADDR64_STRING_LENGTH</ref> (8 2-character bytes + 7 separators + 1 null = 24) bytes.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>64-bit address to format.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><emphasis>address</emphasis> as a printable string (stored in <emphasis>buffer</emphasis>).</para></simplesect>
<xrefsect id="todo_1_todo000005"><xreftitle>Todo</xreftitle><xrefdescription><para>Add a parameter to indicate big or little endian and update code to work with either. (for little-endian, b starts at address-&gt;b + 8 and is decremented)</para></xrefdescription></xrefsect><verbatim>     add a parameter for other formats/flags
     - uppercase vs. lowercase hex
     - compact format (0013a200-405e0ef0)
     - format used by the Python framework (with [!]?)</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wpan/wpan_types.c" line="77" column="1" bodyfile="src/wpan/wpan_types.c" bodystart="77" bodyend="111"/>
        <references refid="group__wpan__types_1ga806a2554dd5d8a154d23b13b9cf72141" compoundref="types_8h" startline="44">ADDR64_FORMAT_SEPARATOR</references>
        <references refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" compoundref="platform_8h" startline="370">FAR</references>
        <referencedby refid="group__wpan__aps_1ga2a4e8b3e2022e55e6607243a5feb25cd" compoundref="wpan__aps_8c" startline="823" endline="841">wpan_envelope_dump</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__wpan__types_1ga2f0706c06dc9bdcb918b55635dcd9b6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__hal__dos_1ga04dd5074964518403bf944f2b240a5f8" kindref="member">bool_t</ref></type>
        <definition>bool_t addr64_equal</definition>
        <argsstring>(const addr64 FAR *addr1, const addr64 FAR *addr2)</argsstring>
        <name>addr64_equal</name>
        <param>
          <type>const <ref refid="unionaddr64" kindref="compound">addr64</ref> <ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref> *</type>
          <declname>addr1</declname>
        </param>
        <param>
          <type>const <ref refid="unionaddr64" kindref="compound">addr64</ref> <ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref> *</type>
          <declname>addr2</declname>
        </param>
        <briefdescription>
<para>Compare two 64-bit addresses for equality. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr1</parametername>
</parameternamelist>
<parameterdescription>
<para>address to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addr2</parametername>
</parameternamelist>
<parameterdescription>
<para>address to compare</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TRUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>addr1</emphasis> and <emphasis>addr2</emphasis> are not NULL and point to identical addresses </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FALSE</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL parameter passed in, or addresses differ </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wpan/wpan_types.c" line="125" column="1" bodyfile="src/wpan/wpan_types.c" bodystart="125" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="group__wpan__types_1ga9795dea7f415ceb7502f39a78ebadfc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__hal__dos_1ga04dd5074964518403bf944f2b240a5f8" kindref="member">bool_t</ref></type>
        <definition>bool_t addr64_is_zero</definition>
        <argsstring>(const addr64 FAR *addr)</argsstring>
        <name>addr64_is_zero</name>
        <param>
          <type>const <ref refid="unionaddr64" kindref="compound">addr64</ref> <ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Test a 64-bit address for zero. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>address to test</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TRUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>addr</computeroutput> is NULL or points to an all-zero address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FALSE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>addr</computeroutput> points to a non-zero address</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__wpan__types_1ga014f9d0857312b6a7f80ee10ecfd0935" kindref="member">WPAN_IEEE_ADDR_ALL_ZEROS</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wpan/wpan_types.c" line="146" column="1" bodyfile="src/wpan/wpan_types.c" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="group__wpan__types_1ga500b175732df9779b3670e2ba1402530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int addr64_parse</definition>
        <argsstring>(addr64 *address_be, const char FAR *str)</argsstring>
        <name>addr64_parse</name>
        <param>
          <type><ref refid="unionaddr64" kindref="compound">addr64</ref> *</type>
          <declname>address_be</declname>
        </param>
        <param>
          <type>const char <ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Parse a text string into a 64-bit IEEE address. </para>        </briefdescription>
        <detaileddescription>
<para>Converts a text string with eight 2-character hex values, with an optional separator between any two values. For example, the following formats are all valid:<itemizedlist>
<listitem><para>01-23-45-67-89-ab-cd-ef</para></listitem><listitem><para>01234567-89ABCDEF</para></listitem><listitem><para>01:23:45:67:89:aB:Cd:EF</para></listitem><listitem><para>0123 4567 89AB cdef</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">address</parametername>
</parameternamelist>
<parameterdescription>
<para>converted address (stored big-endian) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>string to convert, starting with first hex character</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>invalid parameters passed to function; if <emphasis>address</emphasis> is not NULL, it will be set to all zeros </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>string converted </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wpan/wpan_types.c" line="186" column="1" bodyfile="src/wpan/wpan_types.c" bodystart="186" bodyend="229"/>
        <references refid="group__hal_1ga2d1678d5a7cc8ce499643f3b8957def4" compoundref="platform_8h" startline="95">EINVAL</references>
        <references refid="group__hal_1ga519e5ae2049b59689a474a8c48fee353">hexstrtobyte</references>
        <references refid="group__wpan__types_1ga014f9d0857312b6a7f80ee10ecfd0935" compoundref="types_8h" startline="93">WPAN_IEEE_ADDR_ALL_ZEROS</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__wpan__types_1ga806a2554dd5d8a154d23b13b9cf72141" prot="public" static="no">
        <name>ADDR64_FORMAT_SEPARATOR</name>
        <initializer>&apos;-&apos;</initializer>
        <briefdescription>
<para>Separator used by <ref refid="group__wpan__types_1ga448782f4aed0821758969b47221417ed" kindref="member">addr64_format()</ref>, defaults to &apos;-&apos; unless specified at compile time. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wpan/types.h" line="44" column="10" bodyfile="include/wpan/types.h" bodystart="44" bodyend="-1"/>
        <referencedby refid="group__wpan__types_1ga448782f4aed0821758969b47221417ed" compoundref="wpan__types_8c" startline="77" endline="111">addr64_format</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__wpan__types_1gac468b40b060897498f923923654c3d4a" prot="public" static="no">
        <name>ADDR64_STRING_LENGTH</name>
        <initializer>(8 * 2 + 7 + 1)</initializer>
        <briefdescription>
<para>Size of character buffer to pass to <ref refid="group__wpan__types_1ga448782f4aed0821758969b47221417ed" kindref="member">addr64_format()</ref> (8 2-character bytes, 7 separators and 1 null). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/wpan/types.h" line="49" column="9" bodyfile="include/wpan/types.h" bodystart="49" bodyend="-1"/>
        <referencedby refid="group__zdo_1gad723bd899ccda9ec96f6226893c1335b" compoundref="zigbee__zdo_8c" startline="1083" endline="1130">_zdo_process_ieee_addr_resp</referencedby>
        <referencedby refid="group__wpan__aps_1ga2a4e8b3e2022e55e6607243a5feb25cd" compoundref="wpan__aps_8c" startline="823" endline="841">wpan_envelope_dump</referencedby>
        <referencedby refid="group__zdo_1ga40f076c190ab2390836687b8e1f705eb" compoundref="zigbee__zdo_8c" startline="1028" endline="1070">zdo_send_nwk_addr_req</referencedby>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
