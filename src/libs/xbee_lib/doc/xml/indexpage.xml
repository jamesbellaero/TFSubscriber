<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="indexpage" kind="page">
    <compoundname>index</compoundname>
    <title>Overview of Cross-Platform, ANSI C, XBee/ZigBee Driver</title>
    <detaileddescription>
<para>The driver is broken up into multiple layers, with well-defined interfaces between each layer.The two parts of the driver are similar to an Ethernet NIC driver and a TCP/IP networking stack. In our case, the <ref refid="group__xbee" kindref="compound">XBee Driver</ref> handles all serial communication with and configuration of the attached XBee device, the <ref refid="group__wpan" kindref="compound">Wireless Personal Networking</ref> layer provides generic 802.15.4 networking support (endpoints and clusters), and the <ref refid="group__zigbee" kindref="compound">ZigBee Networking Stack</ref> layer provides support for the ZigBee networking protocols.</para><para>These layers make use of a <ref refid="group__hal" kindref="compound">Hardware Abstraction Layer</ref> that must be created for each hardware/compiler platform.</para><para>See the <ref refid="" kindref="compound">Modules </ref> section for a full outline of the API layers.</para><sect1 id="index_1wpan_overview">
<title>WPAN Overview</title>
<para><simplesect kind="par"><title>Endpoint Table</title><para>The endpoint table is a complex data structure that describes all endpoints, clusters, ZCL attributes and manufacturer-specific command handlers for a given device. The structure of the table is as follows (note that not all members of each object are listed):<itemizedlist>
<listitem><para>Each DEVICE (<ref refid="structwpan__dev__t" kindref="compound">wpan_dev_t</ref>) corresponds to a local, serially-connected XBee module. This DEVICE has multiple ENDPOINTs.</para></listitem><listitem><para>Each ENDPOINT (<ref refid="structwpan__endpoint__table__entry__t" kindref="compound">wpan_endpoint_table_entry_t</ref>) has<itemizedlist>
<listitem><para>An ENDPOINT ID (0 to 254), PROFILE ID, DEVICE ID and DEVICE VERSION.</para></listitem><listitem><para>Multiple CLUSTERs. The ZDP endpoint handler currently uses a switch to handle frames for each cluster, but could be updated to let the endpoint dispatcher hand frames off to each cluster&apos;s handler.</para></listitem><listitem><para>A HANDLER to process frames for CLUSTERs without their own HANDLER, or CLUSTERs that aren&apos;t in the table.</para></listitem><listitem><para>A pointer to an ENDPOINT STATE (<ref refid="structwpan__ep__state__t" kindref="compound">wpan_ep_state_t</ref>) structure.</para></listitem></itemizedlist>
</para></listitem><listitem><para>Each CLUSTER (<ref refid="structwpan__cluster__table__entry__t" kindref="compound">wpan_cluster_table_entry_t</ref>) has<itemizedlist>
<listitem><para>FLAGs indicating whether it is an input or output cluster (or both), and whether packets sent to/from the cluster require APS-layer encryption.</para></listitem><listitem><para>A HANDLER to process frames for that cluster.</para></listitem><listitem><para>A CONTEXT pointer that is passed to the HANDLER. For a ZCL endpoint, the CONTEXT points to an ATTRIBUTE TREE.</para></listitem></itemizedlist>
</para></listitem><listitem><para>On ZCL endpoints, each entry in the ATTRIBUTE TREE (<ref refid="structzcl__attribute__tree__t" kindref="compound">zcl_attribute_tree_t</ref>) has<itemizedlist>
<listitem><para>A manufacturer ID with ZCL_MFG_NONE (0) representing the general attributes for the cluster.</para></listitem><listitem><para>Pointers to a list of SERVER and CLIENT cluster ATTRIBUTEs.</para></listitem></itemizedlist>
</para></listitem><listitem><para>Each ATTRIBUTE is either a BASE ATTRIBUTE (<ref refid="structzcl__attribute__base__t" kindref="compound">zcl_attribute_base_t</ref>) with<itemizedlist>
<listitem><para>A 16-bit ID.</para></listitem><listitem><para>FLAGS indicating whether the attribute is read-only, is a full attribute (see below), has a minimum or maximum limit and is reportable.</para></listitem><listitem><para>A ZCL TYPE.</para></listitem><listitem><para>A pointer to the ATTRIBUTE&apos;s VALUE.</para></listitem></itemizedlist>
</para></listitem><listitem><para>... or a FULL ATTRIBUTE (<ref refid="structzcl__attribute__full__t" kindref="compound">zcl_attribute_full_t</ref>) which has<itemizedlist>
<listitem><para>A BASE ATTRIBUTE structure (so both BASE and FULL attributes start with the same structure elements).</para></listitem><listitem><para>Optional MINIMUM and MAXIMUM (<ref refid="unionzcl__attribute__minmax__t" kindref="compound">zcl_attribute_minmax_t</ref>) values.</para></listitem><listitem><para>A READ function (zcl_attribute_update_fn) to refresh the ATTRIBUTE&apos;s VALUE.</para></listitem><listitem><para>A WRITE function (zcl_attribute_write_fn) to process a ZCL Write Attributes request if the attribute requires additional processing over what the standard function, zcl_decode_attribute, does.</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></simplesect>
<simplesect kind="par"><title>Endpoint Dispatching</title><para>The endpoint dispatcher searches the endpoint table to find a handler for a given frame, based on its destination endpoint and cluster ID.</para></simplesect>
</para></sect1>
<sect1 id="index_1zigbee_overview">
<title>ZigBee Overview</title>
<para><simplesect kind="par"><title>ZDO/ZDP (ZigBee Device Object/Profile) Command Processing</title><para>The ZDO endpoint handler (registered to endpoint 0) walks the endpoint table to respond to requests. It needs to know about all endpoints and their input clusters and output clusters. It walks the endpoint table but stops at the context elements. Therefore, all information required by the ZDO layer must exist outside of the context elements of the endpoint table.</para></simplesect>
<simplesect kind="par"><title>ZCL (ZigBee Cluster Library) Command Processing</title><para>Consider a theoretical cluster with manufacturer-specific attributes and commands for more than one manufacturer ID. The handler registered to that cluster would check the frame type and manufacturer-specific bits and hand any GENERAL/PROFILE or MANUFACTURER-SPECIFIC commands off to the ZCL General Command Handler (zcl_general_command).</para></simplesect>
<simplesect kind="par"><title>ZCL General Command Handler</title><para>This handler will see frames from the endpoint dispatcher for<itemizedlist>
<listitem><para>Clusters that aren&apos;t in the cluster table for the endpoint (invalid clusters).</para></listitem><listitem><para>Clusters that don&apos;t have their own handler (no cluster commands).</para></listitem></itemizedlist>
</para></simplesect>
It also receives frames from clusters with handlers for cluster-specific commands that are passing on a general or manufacturer-specific command frame.</para><para>The ZCL General Command handler finds the correct attribute list from the attribute tree (general vs. manufacturer-specific, server vs. client cluster), and then<itemizedlist>
<listitem><para>If the frame is marked CLUSTER &amp; MANUFACTURER-SPECIFIC, it passes the frame on to the handler for that MFG ID (stored in the attribute tree).</para></listitem><listitem><para>If it is marked CLUSTER-SPECIFIC but GENERAL, it generates an error.</para></listitem><listitem><para>If it is marked PROFILE-SPECIFIC and GENERAL, it processes the frame as a general command, using the attribute list it retreived from the tree.</para></listitem></itemizedlist>
</para><para><simplesect kind="par"><title>Summary of ZCL handlers</title><para><itemizedlist>
<listitem><para>ZCL General Command handler registered to the endpoint to process frames for invalid clusters or clusters without cluster-specific commands (i.e., clusters with a NULL command handler).</para></listitem><listitem><para>Cluster-specific, general command handler registered to each cluster.</para></listitem><listitem><para>Cluster-specific, manufacturer-specific command handler(s) listed in the attribute tree (stored in the cluster structure&apos;s context member) under the appropriate manufacturer ID. </para></listitem></itemizedlist>
</para></simplesect>
</para></sect1>
    </detaileddescription>
  </compounddef>
</doxygen>
