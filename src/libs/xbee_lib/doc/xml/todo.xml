<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="todo" kind="page">
    <compoundname>todo</compoundname>
    <title>Todo List</title>
    <detaileddescription>
<para><variablelist>
<varlistentry><term><anchor id="todo_1_todo000009"/>Global <ref refid="group__xbee__atcmd_1ga899d5ef84ca5790c3c76b965f88874e0" kindref="member">_xbee_cmd_release_request</ref>  (<ref refid="structxbee__cmd__request__t" kindref="compound">xbee_cmd_request_t</ref> FAR *request)</term></varlistentry>
<listitem><para>add bounds checking on request to make sure it&apos;s in the table?  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000030"/>Global <ref refid="group__xbee__wpan_1ga56d68291ceee384fbd8a5833eb91182c" kindref="member">_xbee_handle_transmit_status</ref>  (<ref refid="structxbee__dev__t" kindref="compound">xbee_dev_t</ref> *xbee, const void FAR *payload, uint16_t length, void FAR *context)</term></varlistentry>
<listitem><para>Figure out what needs to happen with these frames. Does atcmd layer need to pass errors down to callbacks? Registered endpoints? Tracked conversations?  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000017"/>Global <ref refid="group__zcl__onoff_1gae7dc87cd27559c9ae0499ac542ab6107" kindref="member">_zcl_onoff_handler</ref>  (const <ref refid="structwpan__envelope__t" kindref="compound">wpan_envelope_t</ref> FAR *envelope, void FAR *context)</term></varlistentry>
<listitem><para>set the OnOff attribute to off and break </para><para>set the OnOff attribute to on and break </para><para>toggle the OnOff attribute and break  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000013"/>Global <ref refid="group__zcl__client_1ga15f191f3166c71f3f436b2a32d108a9f" kindref="member">_zcl_send_read_from_zdo_match</ref>  (<ref refid="structwpan__conversation__t" kindref="compound">wpan_conversation_t</ref> FAR *conversation, const <ref refid="structwpan__envelope__t" kindref="compound">wpan_envelope_t</ref> FAR *envelope)</term></varlistentry>
<listitem><para>support a flag in the client_read object for sending ZCL request to first endpoint in list (current behavior) or all endpoints (for example, to query ALL meter endpoints on ALL radios).</para><para>find a way to track whether frame came in from broadcast or unicast response <ndash/> if unicast, can return WPAN_CONVERSATION_END  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000021"/>Global <ref refid="group__zcl_1gaff3abb5d2022101c2873e7a8e8b027e5" kindref="member">_zcl_write_attributes</ref>  (<ref refid="structzcl__command__t" kindref="compound">zcl_command_t</ref> *cmd)</term></varlistentry>
<listitem><para>Generate error if command is not one of the three expected commands.</para><para>Update to limit number of status records in response.  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000026"/>Class <ref refid="unionaddr64" kindref="compound">addr64</ref>  </term></varlistentry>
<listitem><para>update all <ref refid="unionaddr64" kindref="compound">addr64</ref> variables and structure elements to end in _be (big-endian) or _le (little-endian) where appropriate. Add functions to convert 64-bit values between host byte order and big/little endian.  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000005"/>Global <ref refid="group__wpan__types_1ga448782f4aed0821758969b47221417ed" kindref="member">addr64_format</ref>  (char FAR *buffer, const <ref refid="unionaddr64" kindref="compound">addr64</ref> FAR *address)</term></varlistentry>
<listitem><para>Add a parameter to indicate big or little endian and update code to work with either. (for little-endian, b starts at address-&gt;b + 8 and is decremented) </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000027"/>File <ref refid="firmware_8h" kindref="compound">firmware.h</ref>  </term></varlistentry>
<listitem><para>Create typedefs for <ref refid="structxbee__fw__source__t" kindref="compound">xbee_fw_source_t</ref> read() and seek() handlers, write documentation including what the return values are. We will have to check existing functions to confirm the API, but I&apos;m guessing &lt;0 for error, &gt;=0 for number of bytes read. Make sure calls to the read() function check for errors! <ref refid="group__xbee__firmware_1ga06368ad0d6cc0d4e92dbf36f8b233f90" kindref="member">_xbee_oem_verify()</ref> does not!  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000028"/>File <ref refid="platform_8h" kindref="compound">platform.h</ref>  </term></varlistentry>
<listitem><para>find pre-processor macro to identify POSIX platform  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000029"/>File <ref refid="platform__posix_8h" kindref="compound">platform_posix.h</ref>  </term></varlistentry>
<listitem><para>need a configure script to find location of endian.h? </para><para>figure out a way to handle XBEE_NATIVE_64BIT </para><para>better way to determine timer resolution?  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000024"/>Global <ref refid="group__wpan__aps_1ga505477d0257efe527747c6d1f561cd6c" kindref="member">wpan_endpoint_send_fn</ref>  )(const <ref refid="structwpan__envelope__t" kindref="compound">wpan_envelope_t</ref> FAR *envelope, uint16_t flags)</term></varlistentry>
<listitem><para>Add support for a broadcast radius? Don&apos;t send Tx Status? Use frame ID 0?</para><para>come up with standard error codes for the following possible errors? outbound frame buffer is full, invalid data in envelope, payload is too big  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000006"/>File <ref refid="xbee__atcmd_8c" kindref="compound">xbee_atcmd.c</ref>  </term></varlistentry>
<listitem><para>move xbee_cmd_simple and xbee_identify into xbee_device layer?</para><para>Add code to return an error (and disable the stack) if the XBee responds with an IEEE address not in Digi&apos;s allocation?</para><para>review todo list at the top of the file <ndash/> lots to do </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000010"/>Global <ref refid="group__xbee__commissioning_1ga886012f757de4a74d0c992d3ab04a373" kindref="member">xbee_comm_SC</ref>  (<ref refid="structzcl__comm__startup__param__t" kindref="compound">zcl_comm_startup_param_t</ref> FAR *p, const void FAR *value_be)</term></varlistentry>
<listitem><para>Depending on the value of StartupControl, the extended_panid attribute might be set from ID (extended PAN ID) or OP (operating PAN ID). </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000011"/>Global <ref refid="group__xbee__firmware_1ga279def556401f533d798bb3896302ced" kindref="member">xbee_fw_read_byte</ref>  (<ref refid="structxbee__fw__source__t" kindref="compound">xbee_fw_source_t</ref> *source)</term></varlistentry>
<listitem><para>check return value of source-&gt;read here and in _uint16 and _uint32?  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000001"/>File <ref refid="xbee__platform__posix_8c" kindref="compound">xbee_platform_posix.c</ref>  </term></varlistentry>
<listitem><para>Create a platform unit test, one that can verify that the millisecond timer doesn&apos;t run backwards and that it matches up accurately with the seconds timer (base it on the HCS08 regression).  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000002"/>File <ref refid="xbee__serial__posix_8c" kindref="compound">xbee_serial_posix.c</ref>  </term></varlistentry>
<listitem><para>missing a way to hold Tx in break condition  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000003"/>File <ref refid="xbee__serial__rabbit_8c" kindref="compound">xbee_serial_rabbit.c</ref>  </term></varlistentry>
<listitem><para>Need code to make sure IN and OUT buffers are large enough for XBee. Does the out buffer need to be large enough to hold an entire frame? </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000004"/>File <ref refid="xbee__sxa__socket_8c" kindref="compound">xbee_sxa_socket.c</ref>  </term></varlistentry>
<listitem><para>Need a better path MTU discovery mechanism. </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000012"/>File <ref refid="xbee__xmodem_8c" kindref="compound">xbee_xmodem.c</ref>  </term></varlistentry>
<listitem><para>Have timeout values adjust based on link latency. Start out with a high timeout (10 seconds?) and adjust down based on actual response time (maybe 150% of last ACK&apos;s delay?) Timeout for EOT should start at timeout value from last block.  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000031"/>File <ref refid="zcl64_8h" kindref="compound">zcl64.h</ref>  </term></varlistentry>
<listitem><para>add a ZCL64_SPLIT macro to split zcl64_t into high and low halves  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000032"/>Global <ref refid="group__zcl__64_1ga2e906cb47fc172ae60da5178075dd3c7" kindref="member">zcl64_t</ref>  </term></varlistentry>
<listitem><para>Actually code up support for 56-bit values like we did for 24 bit.  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000033"/>File <ref refid="zcl__basic_8h" kindref="compound">zcl_basic.h</ref>  </term></varlistentry>
<listitem><para>Explore how we would support the DeviceEnabled attribute. Does each application need to check it? Does the endpoint dispatcher need to know about it? What about clients?  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000016"/>Global <ref refid="group__zcl__commissioning_1ga91a578cd65163c738bd57a4249955c05" kindref="member">zcl_comm_sas_is_valid</ref>  (const <ref refid="structzcl__comm__state__t" kindref="compound">zcl_comm_state_t</ref> FAR *comm)</term></varlistentry>
<listitem><para>add more tests to this function  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000034"/>File <ref refid="zcl__onoff_8h" kindref="compound">zcl_onoff.h</ref>  </term></varlistentry>
<listitem><para>Write code to support OnOff commands. Create sample program demonstrating use of these clusters (perhaps using LEDs and switches of XBIB-U-DEV board). REQUIRES: need to have reporting in place before this cluster is really useful. Devices need to receive updates whenever switch status changes.  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000020"/>Global <ref refid="group__zcl_1ga9f9ac99001185554fe24dc7b09c0b0b0" kindref="member">zcl_parse_attribute_record</ref>  (const <ref refid="structzcl__attribute__base__t" kindref="compound">zcl_attribute_base_t</ref> FAR *entry, <ref refid="structzcl__attribute__write__rec__t" kindref="compound">zcl_attribute_write_rec_t</ref> *write_rec)</term></varlistentry>
<listitem><para>should we set a flag in write_rec to indicate that the status was not success?  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000015"/>Global <ref refid="group__zcl__client_1ga4c75937cc0fa5c70c63f30b59a4ddebc" kindref="member">zdo_send_match_desc</ref>  (<ref refid="structwpan__dev__t" kindref="compound">wpan_dev_t</ref> *dev, const uint16_t *clusters, uint16_t profile_id, wpan_response_fn callback, const void FAR *context)</term></varlistentry>
<listitem><para>update API to allow for unicast request in addition to broadcast  </para></listitem>
<varlistentry><term><anchor id="todo_1_todo000023"/>File <ref refid="zigbee__zdo_8c" kindref="compound">zigbee_zdo.c</ref>  </term></varlistentry>
<listitem><para>Create a cluster table and have the <ref refid="group__zdo_1gaef7118e478f5ad9949dcd23f6e0901c9" kindref="member">ZDO_ENDPOINT()</ref> macro use it instead of having zdo_handler use a switch on cluster_id to call the handlers for each command. </para></listitem>
</variablelist>
</para>    </detaileddescription>
  </compounddef>
</doxygen>
