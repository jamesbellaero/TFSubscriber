<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="byteorder_8h" kind="file" language="C++">
    <compoundname>byteorder.h</compoundname>
    <includes local="no">string.h</includes>
    <includes refid="platform_8h" local="yes">xbee/platform.h</includes>
    <includedby refid="xbee__sxa__socket_8c" local="yes">src/rabbit/xbee_sxa_socket.c</includedby>
    <includedby refid="swapcpy_8c" local="yes">src/util/swapcpy.c</includedby>
    <includedby refid="xbee__atcmd_8c" local="yes">src/xbee/xbee_atcmd.c</includedby>
    <includedby refid="xbee__device_8c" local="yes">src/xbee/xbee_device.c</includedby>
    <includedby refid="xbee__discovery_8c" local="yes">src/xbee/xbee_discovery.c</includedby>
    <includedby refid="xbee__firmware_8c" local="yes">src/xbee/xbee_firmware.c</includedby>
    <includedby refid="xbee__gpm_8c" local="yes">src/xbee/xbee_gpm.c</includedby>
    <includedby refid="xbee__io_8c" local="yes">src/xbee/xbee_io.c</includedby>
    <includedby refid="xbee__route_8c" local="yes">src/xbee/xbee_route.c</includedby>
    <includedby refid="xbee__scan_8c" local="yes">src/xbee/xbee_scan.c</includedby>
    <includedby refid="xbee__sxa_8c" local="yes">src/xbee/xbee_sxa.c</includedby>
    <includedby refid="xbee__wpan_8c" local="yes">src/xbee/xbee_wpan.c</includedby>
    <includedby refid="zcl__identify_8c" local="yes">src/zigbee/zcl_identify.c</includedby>
    <includedby refid="zcl__time_8c" local="yes">src/zigbee/zcl_time.c</includedby>
    <includedby refid="zigbee__zcl_8c" local="yes">src/zigbee/zigbee_zcl.c</includedby>
    <includedby refid="zigbee__zdo_8c" local="yes">src/zigbee/zigbee_zdo.c</includedby>
    <includedby refid="zcl__types_8h" local="yes">include/zigbee/zcl_types.h</includedby>
    <incdepgraph>
      <node id="160">
        <label>errno.h</label>
      </node>
      <node id="162">
        <label>xbee/jslong_glue.h</label>
        <link refid="jslong__glue_8h_source"/>
        <childnode refid="163" relation="include">
        </childnode>
      </node>
      <node id="161">
        <label>stddef.h</label>
      </node>
      <node id="157">
        <label>include/xbee/byteorder.h</label>
        <link refid="byteorder_8h"/>
        <childnode refid="158" relation="include">
        </childnode>
        <childnode refid="159" relation="include">
        </childnode>
      </node>
      <node id="158">
        <label>string.h</label>
      </node>
      <node id="159">
        <label>xbee/platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="160" relation="include">
        </childnode>
        <childnode refid="161" relation="include">
        </childnode>
        <childnode refid="162" relation="include">
        </childnode>
      </node>
      <node id="163">
        <label>xbee/jslong.h</label>
        <link refid="jslong_8h_source"/>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="168">
        <label>src/xbee/xbee_device.c</label>
        <link refid="xbee__device_8c"/>
      </node>
      <node id="171">
        <label>src/xbee/xbee_gpm.c</label>
        <link refid="xbee__gpm_8c"/>
      </node>
      <node id="178">
        <label>src/zigbee/zcl_time.c</label>
        <link refid="zcl__time_8c"/>
      </node>
      <node id="165">
        <label>src/rabbit/xbee_sxa_socket.c</label>
        <link refid="xbee__sxa__socket_8c"/>
      </node>
      <node id="196">
        <label>src/zigbee/zcl_commissioning.c</label>
        <link refid="zcl__commissioning_8c"/>
      </node>
      <node id="195">
        <label>src/xbee/xbee_commissioning.c</label>
        <link refid="xbee__commissioning_8c"/>
      </node>
      <node id="179">
        <label>src/zigbee/zigbee_zcl.c</label>
        <link refid="zigbee__zcl_8c"/>
      </node>
      <node id="180">
        <label>src/zigbee/zigbee_zdo.c</label>
        <link refid="zigbee__zdo_8c"/>
      </node>
      <node id="172">
        <label>src/xbee/xbee_io.c</label>
        <link refid="xbee__io_8c"/>
      </node>
      <node id="170">
        <label>src/xbee/xbee_firmware.c</label>
        <link refid="xbee__firmware_8c"/>
      </node>
      <node id="182">
        <label>src/zigbee/zcl_types.c</label>
        <link refid="zcl__types_8c"/>
      </node>
      <node id="188">
        <label>include/xbee/ota_server.h</label>
        <link refid="ota__server_8h"/>
        <childnode refid="189" relation="include">
        </childnode>
      </node>
      <node id="186">
        <label>src/zigbee/zcl_client.c</label>
        <link refid="zcl__client_8c"/>
      </node>
      <node id="189">
        <label>src/xbee/xbee_ota_server.c</label>
        <link refid="xbee__ota__server_8c"/>
      </node>
      <node id="185">
        <label>src/zigbee/zcl_basic.c</label>
        <link refid="zcl__basic_8c"/>
      </node>
      <node id="193">
        <label>include/zigbee/zcl_client.h</label>
        <link refid="zcl__client_8h"/>
        <childnode refid="186" relation="include">
        </childnode>
        <childnode refid="178" relation="include">
        </childnode>
      </node>
      <node id="164">
        <label>include/xbee/byteorder.h</label>
        <link refid="byteorder_8h"/>
        <childnode refid="165" relation="include">
        </childnode>
        <childnode refid="166" relation="include">
        </childnode>
        <childnode refid="167" relation="include">
        </childnode>
        <childnode refid="168" relation="include">
        </childnode>
        <childnode refid="169" relation="include">
        </childnode>
        <childnode refid="170" relation="include">
        </childnode>
        <childnode refid="171" relation="include">
        </childnode>
        <childnode refid="172" relation="include">
        </childnode>
        <childnode refid="173" relation="include">
        </childnode>
        <childnode refid="174" relation="include">
        </childnode>
        <childnode refid="175" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
        <childnode refid="178" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="180" relation="include">
        </childnode>
        <childnode refid="181" relation="include">
        </childnode>
      </node>
      <node id="198">
        <label>include/zigbee/zcl_identify.h</label>
        <link refid="zcl__identify_8h"/>
        <childnode refid="177" relation="include">
        </childnode>
      </node>
      <node id="183">
        <label>include/zigbee/zcl.h</label>
        <link refid="zcl_8h"/>
        <childnode refid="184" relation="include">
        </childnode>
        <childnode refid="176" relation="include">
        </childnode>
        <childnode refid="185" relation="include">
        </childnode>
        <childnode refid="186" relation="include">
        </childnode>
        <childnode refid="177" relation="include">
        </childnode>
        <childnode refid="187" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="188" relation="include">
        </childnode>
        <childnode refid="190" relation="include">
        </childnode>
        <childnode refid="191" relation="include">
        </childnode>
        <childnode refid="193" relation="include">
        </childnode>
        <childnode refid="194" relation="include">
        </childnode>
        <childnode refid="198" relation="include">
        </childnode>
        <childnode refid="199" relation="include">
        </childnode>
      </node>
      <node id="194">
        <label>include/zigbee/zcl_commissioning.h</label>
        <link refid="zcl__commissioning_8h"/>
        <childnode refid="195" relation="include">
        </childnode>
        <childnode refid="196" relation="include">
        </childnode>
        <childnode refid="197" relation="include">
        </childnode>
      </node>
      <node id="166">
        <label>src/util/swapcpy.c</label>
        <link refid="swapcpy_8c"/>
      </node>
      <node id="174">
        <label>src/xbee/xbee_scan.c</label>
        <link refid="xbee__scan_8c"/>
      </node>
      <node id="175">
        <label>src/xbee/xbee_sxa.c</label>
        <link refid="xbee__sxa_8c"/>
      </node>
      <node id="176">
        <label>src/xbee/xbee_wpan.c</label>
        <link refid="xbee__wpan_8c"/>
      </node>
      <node id="199">
        <label>include/zigbee/zcl_time.h</label>
        <link refid="zcl__time_8h"/>
        <childnode refid="178" relation="include">
        </childnode>
      </node>
      <node id="181">
        <label>include/zigbee/zcl_types.h</label>
        <link refid="zcl__types_8h"/>
        <childnode refid="182" relation="include">
        </childnode>
        <childnode refid="179" relation="include">
        </childnode>
        <childnode refid="183" relation="include">
        </childnode>
        <childnode refid="194" relation="include">
        </childnode>
      </node>
      <node id="177">
        <label>src/zigbee/zcl_identify.c</label>
        <link refid="zcl__identify_8c"/>
      </node>
      <node id="184">
        <label>src/wpan/wpan_aps.c</label>
        <link refid="wpan__aps_8c"/>
      </node>
      <node id="197">
        <label>include/xbee/commissioning.h</label>
        <link refid="commissioning_8h"/>
        <childnode refid="195" relation="include">
        </childnode>
      </node>
      <node id="173">
        <label>src/xbee/xbee_route.c</label>
        <link refid="xbee__route_8c"/>
      </node>
      <node id="191">
        <label>include/zigbee/zcl_basic.h</label>
        <link refid="zcl__basic_8h"/>
        <childnode refid="185" relation="include">
        </childnode>
        <childnode refid="192" relation="include">
        </childnode>
      </node>
      <node id="187">
        <label>src/zigbee/zcl_onoff.c</label>
        <link refid="zcl__onoff_8c"/>
      </node>
      <node id="167">
        <label>src/xbee/xbee_atcmd.c</label>
        <link refid="xbee__atcmd_8c"/>
      </node>
      <node id="190">
        <label>include/zigbee/zcl_bacnet.h</label>
        <link refid="zcl__bacnet_8h"/>
      </node>
      <node id="192">
        <label>include/zigbee/zcl_basic_attributes.h</label>
        <link refid="zcl__basic__attributes_8h"/>
      </node>
      <node id="169">
        <label>src/xbee/xbee_discovery.c</label>
        <link refid="xbee__discovery_8c"/>
      </node>
    </invincdepgraph>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__util__byteorder_1ga9639d55fe8e5b4daf83a76de40aa3e4e" prot="public" static="no">
        <name>memcpy_letoh</name>
        <param><defname>dst</defname></param>
        <param><defname>src_le</defname></param>
        <param><defname>count</defname></param>
        <initializer>_f_memcpy( dst, src_le, count)</initializer>
        <briefdescription>
<para>Copy <emphasis>count</emphasis> bytes in little-endian byte order from <emphasis>src_le</emphasis> to <emphasis>dst</emphasis> in host byte order (equivalent to memcpy() on little-endian platforms). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="105" column="11" bodyfile="include/xbee/byteorder.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1gaf677c5c03da581dab8015e8350750c00" prot="public" static="no">
        <name>memcpy_htole</name>
        <param><defname>dst_le</defname></param>
        <param><defname>src</defname></param>
        <param><defname>count</defname></param>
        <initializer>_f_memcpy( dst_le, src, count)</initializer>
        <briefdescription>
<para>Copy <emphasis>count</emphasis> bytes in host byte order from <emphasis>src</emphasis> to <emphasis>dst_le</emphasis> in little-endian byte order (equivalent to memcpy() on little-endian platforms). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="106" column="11" bodyfile="include/xbee/byteorder.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1gad871f144718432cb04f76e79aec80c87" prot="public" static="no">
        <name>memcpy_betoh</name>
        <param><defname>dst</defname></param>
        <param><defname>src_be</defname></param>
        <param><defname>count</defname></param>
        <initializer><ref refid="group__util__byteorder_1ga23fd4d4005a80a26ff3c6ba23a4af560" kindref="member">_swapcpy</ref>( dst, src_be, count)</initializer>
        <briefdescription>
<para>Copy <emphasis>count</emphasis> bytes in big-endian byte order from <emphasis>src_be</emphasis> to <emphasis>dst</emphasis> in host byte order (equivalent to memcpy() on big-endian platforms). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="108" column="11" bodyfile="include/xbee/byteorder.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1gaf0f22982f04251ea70fba1fb30d55ef5" prot="public" static="no">
        <name>memcpy_htobe</name>
        <param><defname>dst_be</defname></param>
        <param><defname>src</defname></param>
        <param><defname>count</defname></param>
        <initializer><ref refid="group__util__byteorder_1ga23fd4d4005a80a26ff3c6ba23a4af560" kindref="member">_swapcpy</ref>( dst_be, src, count)</initializer>
        <briefdescription>
<para>Copy <emphasis>count</emphasis> bytes in host byte order from <emphasis>src</emphasis> to <emphasis>dst_be</emphasis> in big-endian byte order (equivalent to memcpy() on big-endian platforms). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="109" column="11" bodyfile="include/xbee/byteorder.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1ga75cf1250c9f15ea3f0d87250c2b43a51" prot="public" static="no">
        <name>memcpy_betole</name>
        <param><defname>dst_le</defname></param>
        <param><defname>src_be</defname></param>
        <param><defname>count</defname></param>
        <initializer><ref refid="group__util__byteorder_1ga23fd4d4005a80a26ff3c6ba23a4af560" kindref="member">_swapcpy</ref>( dst_le, src_be, count)</initializer>
        <briefdescription>
<para>Copy <emphasis>count</emphasis> bytes in big-endian byte order from <emphasis>src_be</emphasis> to <emphasis>dst_le</emphasis> in little-endian byte order (always swaps byte order). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="118" column="10" bodyfile="include/xbee/byteorder.h" bodystart="118" bodyend="-1"/>
        <referencedby refid="group__zdo_1ga40f076c190ab2390836687b8e1f705eb" compoundref="zigbee__zdo_8c" startline="1028" endline="1070">zdo_send_nwk_addr_req</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1gac8afbbc0aa0b7d35ebf38f54dbfbe6c2" prot="public" static="no">
        <name>memcpy_letobe</name>
        <param><defname>dst_be</defname></param>
        <param><defname>src_le</defname></param>
        <param><defname>count</defname></param>
        <initializer><ref refid="group__util__byteorder_1ga23fd4d4005a80a26ff3c6ba23a4af560" kindref="member">_swapcpy</ref>( dst_be, src_le, count)</initializer>
        <briefdescription>
<para>Copy <emphasis>count</emphasis> bytes in little-endian byte order from <emphasis>src_le</emphasis> to <emphasis>dst_be</emphasis> in big-endian byte order (always swaps byte order). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="120" column="10" bodyfile="include/xbee/byteorder.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1ga4b9167199621b390f82c3e5361ba6df6" prot="public" static="no">
        <name>htobe16</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="group__util__byteorder_1ga7cf3526e1af5c8642d2ec02caecf99bc" kindref="member">swap16</ref>(x)</initializer>
        <briefdescription>
<para>Convert a uint16_t in host byte order to big-endian byte order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="127" column="12" bodyfile="include/xbee/byteorder.h" bodystart="127" bodyend="-1"/>
        <referencedby refid="group__xbee__atcmd_1ga2c58eedef60b41dd30ae1f6b475606a8" compoundref="xbee__atcmd_8c" startline="1404" endline="1485">xbee_cmd_send</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1gaa65407014913309932b9a5ea3c16a86d" prot="public" static="no">
        <name>htobe32</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="group__util__byteorder_1ga5bdbc60a02db00841f567d1ade52f877" kindref="member">swap32</ref>(x)</initializer>
        <briefdescription>
<para>Convert a uint32_t in host byte order to big-endian byte order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="128" column="12" bodyfile="include/xbee/byteorder.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1gabb9b3120f6457dc04471c134fee1d221" prot="public" static="no">
        <name>be16toh</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="group__util__byteorder_1ga7cf3526e1af5c8642d2ec02caecf99bc" kindref="member">swap16</ref>(x)</initializer>
        <briefdescription>
<para>Convert a uint16_t in big-endian byte order to host byte order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="131" column="12" bodyfile="include/xbee/byteorder.h" bodystart="131" bodyend="-1"/>
        <referencedby refid="group__xbee__commissioning_1ga886012f757de4a74d0c992d3ab04a373" compoundref="xbee__commissioning_8c" startline="52" endline="56">xbee_comm_SC</referencedby>
        <referencedby refid="group__xbee__discovery_1ga1efd48449a49119fc19ab9843af5ef6c" compoundref="xbee__discovery_8c" startline="39" endline="74">xbee_disc_nd_parse</referencedby>
        <referencedby refid="group__xbee__io_1ga49aae35ec2a46306bf2ad593cecbcf26" compoundref="xbee__io_8c" startline="63" endline="109">xbee_io_response_parse</referencedby>
        <referencedby refid="group__xbee__wpan_1ga8cb1973677412a2c5627a77009a8f283" compoundref="xbee__wpan_8c" startline="54" endline="93">_xbee_handle_receive_explicit</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1ga6acac399720b3a57d9050420aa0aac41" prot="public" static="no">
        <name>be32toh</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="group__util__byteorder_1ga5bdbc60a02db00841f567d1ade52f877" kindref="member">swap32</ref>(x)</initializer>
        <briefdescription>
<para>Convert a uint32_t in big-endian byte order to host byte order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="132" column="12" bodyfile="include/xbee/byteorder.h" bodystart="132" bodyend="-1"/>
        <referencedby refid="group__xbee__discovery_1gab155a485a9aa4870a45dd86d1d468c52" compoundref="xbee__discovery_8c" startline="96" endline="107">xbee_disc_node_id_dump</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1ga3ea73a6089f61223b225c46e2ba58a47" prot="public" static="no">
        <name>htole16</name>
        <param><defname>x</defname></param>
        <initializer>(x)</initializer>
        <briefdescription>
<para>Convert a uint16_t in host byte order to little-endian byte order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="135" column="12" bodyfile="include/xbee/byteorder.h" bodystart="135" bodyend="-1"/>
        <referencedby refid="group__zcl__client_1ga11f72950e4467286ef18468fbcb4bed4" compoundref="zcl__client_8c" startline="426" endline="465">zcl_create_attribute_records</referencedby>
        <referencedby refid="group__zdo_1ga1a65d88af9f0c9906d548aa1ff2586f7" compoundref="zigbee__zdo_8c" startline="199" endline="221">_match_desc_cluster_list</referencedby>
        <referencedby refid="group__zdo_1ga5746efffb4b90718eb973796f2b4bb41" compoundref="zigbee__zdo_8c" startline="247" endline="292">zdo_match_desc_request</referencedby>
        <referencedby refid="group__zdo_1gafbbece379bc09af360099d1e0825d507" compoundref="zigbee__zdo_8c" startline="422" endline="464">zdo_simple_desc_request</referencedby>
        <referencedby refid="group__zdo_1ga558539813d6a9c8813eeae855e77385f" compoundref="zigbee__zdo_8c" startline="483" endline="509">_simple_desc_cluster_list</referencedby>
        <referencedby refid="group__zdo_1gac842062e5e1a60d25cddf16ec22ef601" compoundref="zigbee__zdo_8c" startline="925" endline="969">zdo_send_descriptor_req</referencedby>
        <referencedby refid="group__zdo_1ga4af5f8d70054f7883dbc1305e3a3f181" compoundref="zigbee__zdo_8c" startline="1134" endline="1173">zdo_send_ieee_addr_req</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1ga9bea1e76e277f13ae39ac86095510bfa" prot="public" static="no">
        <name>htole32</name>
        <param><defname>x</defname></param>
        <initializer>(x)</initializer>
        <briefdescription>
<para>Convert a uint32_t in host byte order to little-endian byte order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="136" column="12" bodyfile="include/xbee/byteorder.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1ga684a5d26d1989cbd925e97292cc81c72" prot="public" static="no">
        <name>le16toh</name>
        <param><defname>x</defname></param>
        <initializer>(x)</initializer>
        <briefdescription>
<para>Convert a uint16_t in little-endian byte order to host byte order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="139" column="12" bodyfile="include/xbee/byteorder.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1gad2dfbafcefb3add65ea44e581398e90a" prot="public" static="no">
        <name>le32toh</name>
        <param><defname>x</defname></param>
        <initializer>(x)</initializer>
        <briefdescription>
<para>Convert a uint32_t in little-endian byte order to host byte order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="140" column="12" bodyfile="include/xbee/byteorder.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__util__byteorder_1ga7cf3526e1af5c8642d2ec02caecf99bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__hal__dos_1ga5a8b2dc9e45a9ee81a94ef304fb62505" kindref="member">uint16_t</ref></type>
        <definition>uint16_t swap16</definition>
        <argsstring>(uint16_t value)</argsstring>
        <name>swap16</name>
        <param>
          <type><ref refid="group__hal__dos_1ga5a8b2dc9e45a9ee81a94ef304fb62505" kindref="member">uint16_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Swap the byte order of a 16-bit value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to swap </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new 16-bit value with opposite endianness of <emphasis>value</emphasis> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/swapbytes.c" line="47" column="1" bodyfile="src/util/swapbytes.c" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="group__util__byteorder_1ga5bdbc60a02db00841f567d1ade52f877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__hal__dos_1ga09a1e304d66d35dd47daffee9731edaa" kindref="member">uint32_t</ref></type>
        <definition>uint32_t swap32</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>swap32</name>
        <param>
          <type><ref refid="group__hal__dos_1ga09a1e304d66d35dd47daffee9731edaa" kindref="member">uint32_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Swap the byte order of a 32-bit value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to swap </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new 32-bit value with opposite endianness of <emphasis>value</emphasis> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/swapbytes.c" line="33" column="1" bodyfile="src/util/swapbytes.c" bodystart="33" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="group__util__byteorder_1ga23fd4d4005a80a26ff3c6ba23a4af560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _swapcpy</definition>
        <argsstring>(void FAR *dst, const void FAR *src, uint_fast8_t count)</argsstring>
        <name>_swapcpy</name>
        <param>
          <type>void <ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void <ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>uint_fast8_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Function similar to memcpy() but reverses byte order during copy. Copy <emphasis>count</emphasis> from <emphasis>src</emphasis> to <emphasis>dst</emphasis> while reversing the order. Assumes that <emphasis>src</emphasis> and <emphasis>dst</emphasis> do not overlap. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>source buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/swapcpy.c" line="24" column="1" bodyfile="src/util/swapcpy.c" bodystart="24" bodyend="36"/>
        <references refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" compoundref="platform_8h" startline="370">FAR</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Macros for converting between big/little endian and host byte order. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2010-2012<sp/>Digi<sp/>International<sp/>Inc.,</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>not<sp/>expressly<sp/>granted<sp/>are<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>Source<sp/>Code<sp/>Form<sp/>is<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Mozilla<sp/>Public</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>License,<sp/>v.<sp/>2.0.<sp/>If<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>MPL<sp/>was<sp/>not<sp/>distributed<sp/>with<sp/>this<sp/>file,</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>You<sp/>can<sp/>obtain<sp/>one<sp/>at<sp/>http://mozilla.org/MPL/2.0/.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>Digi<sp/>International<sp/>Inc.<sp/>11001<sp/>Bren<sp/>Road<sp/>East,<sp/>Minnetonka,<sp/>MN<sp/>55343</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>=======================================================================</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="preprocessor">#ifndef<sp/>__XBEE_ENDIAN_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>__XBEE_ENDIAN_H</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>for<sp/>memcpy</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>xbee/platform<sp/>will<sp/>load<sp/>the<sp/>platform&apos;s<sp/>endian.h<sp/>or<sp/>at<sp/>least<sp/>define</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>macros<sp/>LITTLE_ENDIAN,<sp/>BIG_ENDIAN<sp/>and<sp/>BYTE_ORDER.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#include<sp/>&quot;<ref refid="platform_8h" kindref="compound">xbee/platform.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><ref refid="group__hal_1ga336bff4f4a6012aacc4468132bbd3d7f" kindref="member">XBEE_BEGIN_DECLS</ref></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>On<sp/>DOS,<sp/>swap16()<sp/>and<sp/>swap32()<sp/>are<sp/>already<sp/>defined<sp/>as<sp/>macros,<sp/>so<sp/>don&apos;t</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>them<sp/>here.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>swap16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__hal__dos_1ga5a8b2dc9e45a9ee81a94ef304fb62505" kindref="member">uint16_t</ref><sp/><ref refid="group__hal__hcs08_1ga490209526172903494641bdac55db46e" kindref="member">swap16</ref>(<sp/><ref refid="group__hal__dos_1ga5a8b2dc9e45a9ee81a94ef304fb62505" kindref="member">uint16_t</ref><sp/><ref refid="group__xbee__atcmd_1ga5bf2410fa8ec37f47f8afeba8dcc7f1b" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>swap32</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="group__hal__dos_1ga09a1e304d66d35dd47daffee9731edaa" kindref="member">uint32_t</ref><sp/><ref refid="group__hal__hcs08_1ga5bdbc60a02db00841f567d1ade52f877" kindref="member">swap32</ref>(<sp/><ref refid="group__hal__dos_1ga09a1e304d66d35dd47daffee9731edaa" kindref="member">uint32_t</ref><sp/><ref refid="group__xbee__atcmd_1ga5bf2410fa8ec37f47f8afeba8dcc7f1b" kindref="member">value</ref>);</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__hal__rabbit_1ga23fd4d4005a80a26ff3c6ba23a4af560" kindref="member">_swapcpy</ref>(<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*dst,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*src,<sp/>uint_fast8_t<sp/>count);</highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#if<sp/>BYTE_ORDER<sp/>==<sp/>LITTLE_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="105" refid="group__util__byteorder_1ga9639d55fe8e5b4daf83a76de40aa3e4e" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>memcpy_letoh(<sp/>dst,<sp/>src_le,<sp/>count)<sp/>_f_memcpy(<sp/>dst,<sp/>src_le,<sp/>count)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="group__util__byteorder_1gaf677c5c03da581dab8015e8350750c00" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>memcpy_htole(<sp/>dst_le,<sp/>src,<sp/>count)<sp/>_f_memcpy(<sp/>dst_le,<sp/>src,<sp/>count)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="107"><highlight class="normal"></highlight></codeline>
<codeline lineno="108" refid="group__util__byteorder_1gad871f144718432cb04f76e79aec80c87" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>memcpy_betoh(<sp/>dst,<sp/>src_be,<sp/>count)<sp/>_swapcpy(<sp/>dst,<sp/>src_be,<sp/>count)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109" refid="group__util__byteorder_1gaf0f22982f04251ea70fba1fb30d55ef5" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>memcpy_htobe(<sp/>dst_be,<sp/>src,<sp/>count)<sp/>_swapcpy(<sp/>dst_be,<sp/>src,<sp/>count)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>memcpy_letoh(<sp/>dst,<sp/>src_le,<sp/>count)<sp/>_swapcpy(<sp/>dst,<sp/>src_le,<sp/>count)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>memcpy_htole(<sp/>dst_le,<sp/>src,<sp/>count)<sp/>_swapcpy(<sp/>dst_le,<sp/>src,<sp/>count)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>memcpy_betoh(<sp/>dst,<sp/>src_be,<sp/>count)<sp/>_f_memcpy(<sp/>dst,<sp/>src_be,<sp/>count)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>memcpy_htobe(<sp/>dst_be,<sp/>src,<sp/>count)<sp/>_f_memcpy(<sp/>dst_be,<sp/>src,<sp/>count)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"></highlight></codeline>
<codeline lineno="118" refid="group__util__byteorder_1ga75cf1250c9f15ea3f0d87250c2b43a51" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>memcpy_betole(<sp/>dst_le,<sp/>src_be,<sp/>count)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="119"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_swapcpy(<sp/>dst_le,<sp/>src_be,<sp/>count)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120" refid="group__util__byteorder_1gac8afbbc0aa0b7d35ebf38f54dbfbe6c2" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#define<sp/>memcpy_letobe(<sp/>dst_be,<sp/>src_le,<sp/>count)<sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="121"><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>_swapcpy(<sp/>dst_be,<sp/>src_le,<sp/>count)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"></highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>define<sp/>byte-swapping<sp/>macros<sp/>if<sp/>the<sp/>platform<sp/>hasn&apos;t<sp/>already<sp/>done<sp/>so</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#ifndef<sp/>htobe16</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#if<sp/>BYTE_ORDER<sp/>==<sp/>LITTLE_ENDIAN</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>host<sp/>to<sp/>big-endian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127" refid="group__util__byteorder_1ga4b9167199621b390f82c3e5361ba6df6" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>htobe16(x)<sp/><sp/><sp/>swap16(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128" refid="group__util__byteorder_1gaa65407014913309932b9a5ea3c16a86d" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>htobe32(x)<sp/><sp/><sp/>swap32(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"></highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>big-endian<sp/>to<sp/>host</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="group__util__byteorder_1gabb9b3120f6457dc04471c134fee1d221" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>be16toh(x)<sp/><sp/><sp/>swap16(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132" refid="group__util__byteorder_1ga6acac399720b3a57d9050420aa0aac41" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>be32toh(x)<sp/><sp/><sp/>swap32(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>host<sp/>to<sp/>little-endian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135" refid="group__util__byteorder_1ga3ea73a6089f61223b225c46e2ba58a47" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>htole16(x)<sp/><sp/><sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136" refid="group__util__byteorder_1ga9bea1e76e277f13ae39ac86095510bfa" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>htole32(x)<sp/><sp/><sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>little-endian<sp/>to<sp/>host</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="139" refid="group__util__byteorder_1ga684a5d26d1989cbd925e97292cc81c72" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>le16toh(x)<sp/><sp/><sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="140" refid="group__util__byteorder_1gad2dfbafcefb3add65ea44e581398e90a" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>le32toh(x)<sp/><sp/><sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>host<sp/>to<sp/>little-endian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>htole16(x)<sp/><sp/><sp/>swap16(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="144"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>htole32(x)<sp/><sp/><sp/>swap32(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>little-endian<sp/>to<sp/>host</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>le16toh(x)<sp/><sp/><sp/>swap16(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>le32toh(x)<sp/><sp/><sp/>swap32(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="149"><highlight class="normal"></highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>host<sp/>to<sp/>big-endian</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>htobe16(x)<sp/><sp/><sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>htobe32(x)<sp/><sp/><sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>big-endian<sp/>to<sp/>host</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="155"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>be16toh(x)<sp/><sp/><sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>#define<sp/>be32toh(x)<sp/><sp/><sp/>(x)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight><highlight class="preprocessor"><sp/><sp/><sp/>#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"></highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><ref refid="group__hal_1ga8d7f5a691878e9ffb7da396899581062" kindref="member">XBEE_END_DECLS</ref></highlight></codeline>
<codeline lineno="161"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="include/xbee/byteorder.h"/>
  </compounddef>
</doxygen>
