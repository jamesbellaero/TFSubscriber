<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="wpan__types_8c" kind="file" language="C++">
    <compoundname>wpan_types.c</compoundname>
    <includes local="no">ctype.h</includes>
    <includes local="no">string.h</includes>
    <includes refid="types_8h" local="yes">wpan/types.h</includes>
    <incdepgraph>
      <node id="1279">
        <label>errno.h</label>
      </node>
      <node id="1281">
        <label>xbee/jslong_glue.h</label>
        <link refid="jslong__glue_8h_source"/>
        <childnode refid="1282" relation="include">
        </childnode>
      </node>
      <node id="1280">
        <label>stddef.h</label>
      </node>
      <node id="1276">
        <label>string.h</label>
      </node>
      <node id="1277">
        <label>wpan/types.h</label>
        <link refid="types_8h"/>
        <childnode refid="1278" relation="include">
        </childnode>
      </node>
      <node id="1278">
        <label>xbee/platform.h</label>
        <link refid="platform_8h"/>
        <childnode refid="1279" relation="include">
        </childnode>
        <childnode refid="1280" relation="include">
        </childnode>
        <childnode refid="1281" relation="include">
        </childnode>
      </node>
      <node id="1275">
        <label>ctype.h</label>
      </node>
      <node id="1274">
        <label>src/wpan/wpan_types.c</label>
        <link refid="wpan__types_8c"/>
        <childnode refid="1275" relation="include">
        </childnode>
        <childnode refid="1276" relation="include">
        </childnode>
        <childnode refid="1277" relation="include">
        </childnode>
      </node>
      <node id="1282">
        <label>xbee/jslong.h</label>
        <link refid="jslong_8h_source"/>
      </node>
    </incdepgraph>
      <sectiondef kind="var">
      <memberdef kind="variable" id="group__wpan__types_1gaaa2d876b00a2f300e24f1077e17dcb76" prot="public" static="no" mutable="no">
        <type>const <ref refid="unionaddr64" kindref="compound">addr64</ref></type>
        <definition>const addr64 _WPAN_IEEE_ADDR_UNDEFINED</definition>
        <argsstring></argsstring>
        <name>_WPAN_IEEE_ADDR_UNDEFINED</name>
        <initializer>=
								{ { 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF } }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal><para>address pointed to by macro <ref refid="group__wpan__types_1ga09e965ef6cfbfd48312d86bb011f125b" kindref="member">WPAN_IEEE_ADDR_UNDEFINED</ref> </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wpan/wpan_types.c" line="30" column="1" bodyfile="src/wpan/wpan_types.c" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__wpan__types_1ga83c0da7da25848a435da46b80fb70933" prot="public" static="no" mutable="no">
        <type>const <ref refid="unionaddr64" kindref="compound">addr64</ref></type>
        <definition>const addr64 _WPAN_IEEE_ADDR_BROADCAST</definition>
        <argsstring></argsstring>
        <name>_WPAN_IEEE_ADDR_BROADCAST</name>
        <initializer>=
								{ { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF, 0xFF } }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal><para>address pointed to by macro <ref refid="group__wpan__types_1gaced36f5538c5bb2da4f60a90313f1674" kindref="member">WPAN_IEEE_ADDR_BROADCAST</ref> </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wpan/wpan_types.c" line="36" column="1" bodyfile="src/wpan/wpan_types.c" bodystart="36" bodyend="-1"/>
        <referencedby refid="group__zcl__client_1ga4c75937cc0fa5c70c63f30b59a4ddebc" compoundref="zcl__client_8c" startline="334" endline="402">zdo_send_match_desc</referencedby>
      </memberdef>
      <memberdef kind="variable" id="group__wpan__types_1gac6bb0830c58428d2789507a23ab9fcdd" prot="public" static="no" mutable="no">
        <type>const <ref refid="unionaddr64" kindref="compound">addr64</ref></type>
        <definition>const addr64 _WPAN_IEEE_ADDR_COORDINATOR</definition>
        <argsstring></argsstring>
        <name>_WPAN_IEEE_ADDR_COORDINATOR</name>
        <initializer>=
								{ { 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 } }</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<internal><para>address pointed to by macro <ref refid="group__wpan__types_1ga816199ef85ef801e07ae48350664034d" kindref="member">WPAN_IEEE_ADDR_COORDINATOR</ref> </para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wpan/wpan_types.c" line="42" column="1" bodyfile="src/wpan/wpan_types.c" bodystart="42" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__wpan__types_1ga448782f4aed0821758969b47221417ed" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>char <ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref> *</type>
        <definition>char FAR * addr64_format</definition>
        <argsstring>(char FAR *buffer, const addr64 FAR *address)</argsstring>
        <name>addr64_format</name>
        <param>
          <type>char <ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref> *</type>
          <declname>buffer</declname>
        </param>
        <param>
          <type>const <ref refid="unionaddr64" kindref="compound">addr64</ref> <ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref> *</type>
          <declname>address</declname>
        </param>
        <briefdescription>
<para>Format a 64-bit address as a null-terminated, printable string (e.g., &quot;00-13-A2-01-23-45-67&quot;). </para>        </briefdescription>
        <detaileddescription>
<para>If the first two bytes are 0x00, assume a 48-bit MAC address and format as 00-40-9D-01-23-45.</para><para>To change the default separator (&apos;-&apos;), define ADDR64_FORMAT_SEPARATOR to any character. For example:</para><para>#define ADDR64_FORMAT_SEPARATOR &apos;:&apos;</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">buffer</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to a buffer of at least <ref refid="group__wpan__types_1gac468b40b060897498f923923654c3d4a" kindref="member">ADDR64_STRING_LENGTH</ref> (8 2-character bytes + 7 separators + 1 null = 24) bytes.</para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">address</parametername>
</parameternamelist>
<parameterdescription>
<para>64-bit address to format.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><emphasis>address</emphasis> as a printable string (stored in <emphasis>buffer</emphasis>).</para></simplesect>
<xrefsect id="todo_1_todo000005"><xreftitle>Todo</xreftitle><xrefdescription><para>Add a parameter to indicate big or little endian and update code to work with either. (for little-endian, b starts at address-&gt;b + 8 and is decremented)</para></xrefdescription></xrefsect><verbatim>     add a parameter for other formats/flags
     - uppercase vs. lowercase hex
     - compact format (0013a200-405e0ef0)
     - format used by the Python framework (with [!]?)</verbatim> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wpan/wpan_types.c" line="77" column="1" bodyfile="src/wpan/wpan_types.c" bodystart="77" bodyend="111"/>
        <references refid="group__wpan__types_1ga806a2554dd5d8a154d23b13b9cf72141" compoundref="types_8h" startline="44">ADDR64_FORMAT_SEPARATOR</references>
        <references refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" compoundref="platform_8h" startline="370">FAR</references>
        <referencedby refid="group__wpan__aps_1ga2a4e8b3e2022e55e6607243a5feb25cd" compoundref="wpan__aps_8c" startline="823" endline="841">wpan_envelope_dump</referencedby>
      </memberdef>
      <memberdef kind="function" id="group__wpan__types_1ga2f0706c06dc9bdcb918b55635dcd9b6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__hal__dos_1ga04dd5074964518403bf944f2b240a5f8" kindref="member">bool_t</ref></type>
        <definition>bool_t addr64_equal</definition>
        <argsstring>(const addr64 FAR *addr1, const addr64 FAR *addr2)</argsstring>
        <name>addr64_equal</name>
        <param>
          <type>const <ref refid="unionaddr64" kindref="compound">addr64</ref> <ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref> *</type>
          <declname>addr1</declname>
        </param>
        <param>
          <type>const <ref refid="unionaddr64" kindref="compound">addr64</ref> <ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref> *</type>
          <declname>addr2</declname>
        </param>
        <briefdescription>
<para>Compare two 64-bit addresses for equality. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr1</parametername>
</parameternamelist>
<parameterdescription>
<para>address to compare </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">addr2</parametername>
</parameternamelist>
<parameterdescription>
<para>address to compare</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TRUE</parametername>
</parameternamelist>
<parameterdescription>
<para><emphasis>addr1</emphasis> and <emphasis>addr2</emphasis> are not NULL and point to identical addresses </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FALSE</parametername>
</parameternamelist>
<parameterdescription>
<para>NULL parameter passed in, or addresses differ </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wpan/wpan_types.c" line="125" column="1" bodyfile="src/wpan/wpan_types.c" bodystart="125" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="group__wpan__types_1ga9795dea7f415ceb7502f39a78ebadfc1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__hal__dos_1ga04dd5074964518403bf944f2b240a5f8" kindref="member">bool_t</ref></type>
        <definition>bool_t addr64_is_zero</definition>
        <argsstring>(const addr64 FAR *addr)</argsstring>
        <name>addr64_is_zero</name>
        <param>
          <type>const <ref refid="unionaddr64" kindref="compound">addr64</ref> <ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref> *</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Test a 64-bit address for zero. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">addr</parametername>
</parameternamelist>
<parameterdescription>
<para>address to test</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>TRUE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>addr</computeroutput> is NULL or points to an all-zero address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>FALSE</parametername>
</parameternamelist>
<parameterdescription>
<para><computeroutput>addr</computeroutput> points to a non-zero address</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><ref refid="group__wpan__types_1ga014f9d0857312b6a7f80ee10ecfd0935" kindref="member">WPAN_IEEE_ADDR_ALL_ZEROS</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wpan/wpan_types.c" line="146" column="1" bodyfile="src/wpan/wpan_types.c" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="group__wpan__types_1ga500b175732df9779b3670e2ba1402530" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int addr64_parse</definition>
        <argsstring>(addr64 *address_be, const char FAR *str)</argsstring>
        <name>addr64_parse</name>
        <param>
          <type><ref refid="unionaddr64" kindref="compound">addr64</ref> *</type>
          <declname>address_be</declname>
        </param>
        <param>
          <type>const char <ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref> *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>Parse a text string into a 64-bit IEEE address. </para>        </briefdescription>
        <detaileddescription>
<para>Converts a text string with eight 2-character hex values, with an optional separator between any two values. For example, the following formats are all valid:<itemizedlist>
<listitem><para>01-23-45-67-89-ab-cd-ef</para></listitem><listitem><para>01234567-89ABCDEF</para></listitem><listitem><para>01:23:45:67:89:aB:Cd:EF</para></listitem><listitem><para>0123 4567 89AB cdef</para></listitem></itemizedlist>
</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">address</parametername>
</parameternamelist>
<parameterdescription>
<para>converted address (stored big-endian) </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">str</parametername>
</parameternamelist>
<parameterdescription>
<para>string to convert, starting with first hex character</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="retval"><parameteritem>
<parameternamelist>
<parametername>-EINVAL</parametername>
</parameternamelist>
<parameterdescription>
<para>invalid parameters passed to function; if <emphasis>address</emphasis> is not NULL, it will be set to all zeros </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>0</parametername>
</parameternamelist>
<parameterdescription>
<para>string converted </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/wpan/wpan_types.c" line="186" column="1" bodyfile="src/wpan/wpan_types.c" bodystart="186" bodyend="229"/>
        <references refid="group__hal_1ga2d1678d5a7cc8ce499643f3b8957def4" compoundref="platform_8h" startline="95">EINVAL</references>
        <references refid="group__hal_1ga519e5ae2049b59689a474a8c48fee353">hexstrtobyte</references>
        <references refid="group__wpan__types_1ga014f9d0857312b6a7f80ee10ecfd0935" compoundref="types_8h" startline="93">WPAN_IEEE_ADDR_ALL_ZEROS</references>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Data types and macros used by all WPAN (802.15.4) devices. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(c)<sp/>2009-2013<sp/>Digi<sp/>International<sp/>Inc.,</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>not<sp/>expressly<sp/>granted<sp/>are<sp/>reserved.</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>This<sp/>Source<sp/>Code<sp/>Form<sp/>is<sp/>subject<sp/>to<sp/>the<sp/>terms<sp/>of<sp/>the<sp/>Mozilla<sp/>Public</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>License,<sp/>v.<sp/>2.0.<sp/>If<sp/>a<sp/>copy<sp/>of<sp/>the<sp/>MPL<sp/>was<sp/>not<sp/>distributed<sp/>with<sp/>this<sp/>file,</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>You<sp/>can<sp/>obtain<sp/>one<sp/>at<sp/>http://mozilla.org/MPL/2.0/.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>Digi<sp/>International<sp/>Inc.<sp/>11001<sp/>Bren<sp/>Road<sp/>East,<sp/>Minnetonka,<sp/>MN<sp/>55343</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>=======================================================================</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="comment">/***<sp/>BeginHeader<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;ctype.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;string.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&quot;<ref refid="types_8h" kindref="compound">wpan/types.h</ref>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="comment">/***<sp/>EndHeader<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="comment">/***<sp/>BeginHeader<sp/>_WPAN_IEEE_ADDR_UNDEFINED<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="comment">/***<sp/>EndHeader<sp/>*/</highlight></codeline>
<codeline lineno="30" refid="group__wpan__types_1gaaa2d876b00a2f300e24f1077e17dcb76" refkind="member"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionaddr64" kindref="compound">addr64</ref><sp/><ref refid="group__wpan__types_1gaaa2d876b00a2f300e24f1077e17dcb76" kindref="member">_WPAN_IEEE_ADDR_UNDEFINED</ref><sp/>=</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>{<sp/>0xFF,<sp/>0xFF,<sp/>0xFF,<sp/>0xFF,<sp/>0xFF,<sp/>0xFF,<sp/>0xFF,<sp/>0xFF<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="comment">/***<sp/>BeginHeader<sp/>_WPAN_IEEE_ADDR_BROADCAST<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="comment">/***<sp/>EndHeader<sp/>*/</highlight></codeline>
<codeline lineno="36" refid="group__wpan__types_1ga83c0da7da25848a435da46b80fb70933" refkind="member"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionaddr64" kindref="compound">addr64</ref><sp/><ref refid="group__wpan__types_1ga83c0da7da25848a435da46b80fb70933" kindref="member">_WPAN_IEEE_ADDR_BROADCAST</ref><sp/>=</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>{<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0xFF,<sp/>0xFF<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="comment">/***<sp/>BeginHeader<sp/>_WPAN_IEEE_ADDR_COORDINATOR<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="comment">/***<sp/>EndHeader<sp/>*/</highlight></codeline>
<codeline lineno="42" refid="group__wpan__types_1gac6bb0830c58428d2789507a23ab9fcdd" refkind="member"><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionaddr64" kindref="compound">addr64</ref><sp/><ref refid="group__wpan__types_1gac6bb0830c58428d2789507a23ab9fcdd" kindref="member">_WPAN_IEEE_ADDR_COORDINATOR</ref><sp/>=</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{<sp/>{<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00,<sp/>0x00<sp/>}<sp/>};</highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight><highlight class="comment">/***<sp/>BeginHeader<sp/>addr64_format<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="comment">/***<sp/>EndHeader<sp/>*/</highlight></codeline>
<codeline lineno="77" refid="group__wpan__types_1ga448782f4aed0821758969b47221417ed" refkind="member"><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*<ref refid="group__wpan__types_1ga448782f4aed0821758969b47221417ed" kindref="member">addr64_format</ref>(<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*buffer,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionaddr64" kindref="compound">addr64</ref><sp/><ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*address)</highlight></codeline>
<codeline lineno="78"><highlight class="normal">{</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>i,<sp/>start;</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="group__hal__dos_1gae1affc9ca37cfb624959c866a73f83c2" kindref="member">uint8_t</ref><sp/><ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*b;</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*p;</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/>uint_fast8_t<sp/>ch;</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>format<sp/>address<sp/>into<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/>p<sp/>=<sp/>buffer;</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/>b<sp/>=<sp/>address-&gt;b;</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/>start<sp/>=<sp/>8;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(b[0]<sp/>==<sp/>0x00<sp/>&amp;&amp;<sp/>b[1]<sp/>==<sp/>0x00)<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>48-bit<sp/>MAC<sp/>address</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>b<sp/>+=<sp/>2;</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>start<sp/>-=<sp/>2;</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(i<sp/>=<sp/>start;<sp/>;<sp/>)</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>ch<sp/>=<sp/>*b++;</highlight></codeline>
<codeline lineno="96"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0123456789abcdef&quot;</highlight><highlight class="normal">[ch<sp/>&gt;&gt;<sp/>4];</highlight></codeline>
<codeline lineno="97"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/></highlight><highlight class="stringliteral">&quot;0123456789abcdef&quot;</highlight><highlight class="normal">[ch<sp/>&amp;<sp/>0x0F];</highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(--i)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p++<sp/>=<sp/><ref refid="group__wpan__types_1ga806a2554dd5d8a154d23b13b9cf72141" kindref="member">ADDR64_FORMAT_SEPARATOR</ref>;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*p<sp/>=<sp/></highlight><highlight class="charliteral">&apos;\0&apos;</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>return<sp/>start<sp/>of<sp/>buffer</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>buffer;</highlight></codeline>
<codeline lineno="111"><highlight class="normal">}</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="comment">/***<sp/>BeginHeader<sp/>addr64_equal<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="comment">/***<sp/>EndHeader<sp/>*/</highlight></codeline>
<codeline lineno="125" refid="group__wpan__types_1ga2f0706c06dc9bdcb918b55635dcd9b6f" refkind="member"><highlight class="normal"><ref refid="group__hal__dos_1ga04dd5074964518403bf944f2b240a5f8" kindref="member">bool_t</ref><sp/><ref refid="group__wpan__types_1ga2f0706c06dc9bdcb918b55635dcd9b6f" kindref="member">addr64_equal</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionaddr64" kindref="compound">addr64</ref><sp/><ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*addr1,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionaddr64" kindref="compound">addr64</ref><sp/><ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*addr2)</highlight></codeline>
<codeline lineno="126"><highlight class="normal">{</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>This<sp/>is<sp/>marginally<sp/>faster<sp/>than<sp/>calling<sp/>memcmp.<sp/><sp/>Make<sp/>sure<sp/>neither</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>parameter<sp/>is<sp/>NULL<sp/>and<sp/>then<sp/>do<sp/>two<sp/>4-byte<sp/>compares.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(addr1<sp/>&amp;&amp;<sp/>addr2<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>addr1-&gt;l[0]<sp/>==<sp/>addr2-&gt;l[0]<sp/>&amp;&amp;<sp/>addr1-&gt;l[1]<sp/>==<sp/>addr2-&gt;l[1]);</highlight></codeline>
<codeline lineno="131"><highlight class="normal">}</highlight></codeline>
<codeline lineno="132"><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight><highlight class="comment">/***<sp/>BeginHeader<sp/>addr64_is_zero<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="comment">/***<sp/>EndHeader<sp/>*/</highlight></codeline>
<codeline lineno="146" refid="group__wpan__types_1ga9795dea7f415ceb7502f39a78ebadfc1" refkind="member"><highlight class="normal"><ref refid="group__hal__dos_1ga04dd5074964518403bf944f2b240a5f8" kindref="member">bool_t</ref><sp/><ref refid="group__wpan__types_1ga9795dea7f415ceb7502f39a78ebadfc1" kindref="member">addr64_is_zero</ref>(<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="unionaddr64" kindref="compound">addr64</ref><sp/><ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*addr)</highlight></codeline>
<codeline lineno="147"><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>!<sp/>(addr<sp/>&amp;&amp;<sp/>(addr-&gt;l[0]<sp/>||<sp/>addr-&gt;l[1]));</highlight></codeline>
<codeline lineno="149"><highlight class="normal">}</highlight></codeline>
<codeline lineno="150"><highlight class="normal"></highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight><highlight class="comment">/*</highlight></codeline>
<codeline lineno="152"><highlight class="comment"><sp/><sp/><sp/>Do<sp/>we<sp/>need<sp/>functions<sp/>to<sp/>return<sp/>the<sp/>high<sp/>and<sp/>low<sp/>32-bit<sp/>halves<sp/>of<sp/>an<sp/>addr64</highlight></codeline>
<codeline lineno="153"><highlight class="comment"><sp/><sp/><sp/>in<sp/>host<sp/>byte<sp/>order?</highlight></codeline>
<codeline lineno="154"><highlight class="comment"></highlight></codeline>
<codeline lineno="155"><highlight class="comment"><sp/><sp/><sp/>addr64_high32h<sp/>and<sp/>addr64_low32h?</highlight></codeline>
<codeline lineno="156"><highlight class="comment"></highlight></codeline>
<codeline lineno="157"><highlight class="comment"><sp/><sp/><sp/>ntoh64<sp/>and<sp/>hton64?</highlight></codeline>
<codeline lineno="158"><highlight class="comment"></highlight></codeline>
<codeline lineno="159"><highlight class="comment"><sp/><sp/><sp/>I<sp/>would<sp/>prefer<sp/>to<sp/>ALWAYS<sp/>store<sp/>the<sp/>bytes<sp/>in<sp/>an<sp/>addr64<sp/>structure<sp/>in<sp/>network</highlight></codeline>
<codeline lineno="160"><highlight class="comment"><sp/><sp/><sp/>byte<sp/>order<sp/>to<sp/>reduce<sp/>the<sp/>possibility<sp/>of<sp/>us<sp/>passing<sp/>a<sp/>struct<sp/>with<sp/>the<sp/>wrong</highlight></codeline>
<codeline lineno="161"><highlight class="comment"><sp/><sp/><sp/>byte<sp/>order.<sp/><sp/>That<sp/>doesn&apos;t<sp/>mean<sp/>we<sp/>shouldn&apos;t<sp/>provide<sp/>helper<sp/>functions<sp/>to</highlight></codeline>
<codeline lineno="162"><highlight class="comment"><sp/><sp/><sp/>get<sp/>or<sp/>set<sp/>the<sp/>32-bit<sp/>halves<sp/>in<sp/>host<sp/>byte<sp/>order.</highlight></codeline>
<codeline lineno="163"><highlight class="comment"></highlight></codeline>
<codeline lineno="164"><highlight class="comment">*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="comment">/***<sp/>BeginHeader<sp/>addr64_parse<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight><highlight class="comment">/***<sp/>EndHeader<sp/>*/</highlight></codeline>
<codeline lineno="186" refid="group__wpan__types_1ga500b175732df9779b3670e2ba1402530" refkind="member"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="group__wpan__types_1ga500b175732df9779b3670e2ba1402530" kindref="member">addr64_parse</ref>(<sp/><ref refid="unionaddr64" kindref="compound">addr64</ref><sp/>*address_be,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/><ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref><sp/>*str)</highlight></codeline>
<codeline lineno="187"><highlight class="normal">{</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/>uint_fast8_t<sp/>i;</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><ref refid="group__hal__dos_1gae1affc9ca37cfb624959c866a73f83c2" kindref="member">uint8_t</ref><sp/>*b;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ret;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/>i<sp/>=<sp/>8;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bytes<sp/>to<sp/>convert</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(str<sp/>!=<sp/>NULL<sp/>&amp;&amp;<sp/>address_be<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>over<sp/>leading<sp/>spaces</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">while</highlight><highlight class="normal"><sp/>(isspace(<sp/>(<ref refid="group__hal__dos_1gae1affc9ca37cfb624959c866a73f83c2" kindref="member">uint8_t</ref>)<sp/>*str))</highlight></codeline>
<codeline lineno="197"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++str;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(b<sp/>=<sp/>address_be-&gt;b;<sp/>i;<sp/>++b,<sp/>--i)</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ret<sp/>=<sp/><ref refid="group__hal_1ga519e5ae2049b59689a474a8c48fee353" kindref="member">hexstrtobyte</ref>(<sp/>str);</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(ret<sp/>&lt;<sp/>0)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">break</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>*b<sp/>=<sp/>(<ref refid="group__hal__dos_1gae1affc9ca37cfb624959c866a73f83c2" kindref="member">uint8_t</ref>)ret;</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>str<sp/>+=<sp/>2;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>point<sp/>past<sp/>the<sp/>encoded<sp/>byte</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="209"><highlight class="normal"></highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>skip<sp/>over<sp/>any<sp/>separator,<sp/>if<sp/>present</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(*str<sp/>&amp;&amp;<sp/>!<sp/>isxdigit(<sp/>(<ref refid="group__hal__dos_1gae1affc9ca37cfb624959c866a73f83c2" kindref="member">uint8_t</ref>)<sp/>*str))</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>++str;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(i<sp/>==<sp/>0)<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>successful<sp/>conversion</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>conversion<sp/>not<sp/>complete</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(address_be<sp/>!=<sp/>NULL)</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="226"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>*address_be<sp/>=<sp/>*<ref refid="group__wpan__types_1ga014f9d0857312b6a7f80ee10ecfd0935" kindref="member">WPAN_IEEE_ADDR_ALL_ZEROS</ref>;<sp/><sp/></highlight><highlight class="comment">//<sp/>zero<sp/>out<sp/>address<sp/>on<sp/>errors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>-<ref refid="group__hal_1ga2d1678d5a7cc8ce499643f3b8957def4" kindref="member">EINVAL</ref>;</highlight></codeline>
<codeline lineno="229"><highlight class="normal">}</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"></highlight></codeline>
<codeline lineno="232"><highlight class="normal"></highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="src/wpan/wpan_types.c"/>
  </compounddef>
</doxygen>
