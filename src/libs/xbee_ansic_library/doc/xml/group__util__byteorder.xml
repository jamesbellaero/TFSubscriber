<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="group__util__byteorder" kind="group">
    <compoundname>util_byteorder</compoundname>
    <title>Byte-swapping functions</title>
    <innerfile refid="swapbytes_8c">swapbytes.c</innerfile>
    <innerfile refid="swapcpy_8c">swapcpy.c</innerfile>
    <innerfile refid="byteorder_8h">byteorder.h</innerfile>
      <sectiondef kind="func">
      <memberdef kind="function" id="group__util__byteorder_1ga5bdbc60a02db00841f567d1ade52f877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__hal__dos_1ga09a1e304d66d35dd47daffee9731edaa" kindref="member">uint32_t</ref></type>
        <definition>uint32_t swap32</definition>
        <argsstring>(uint32_t value)</argsstring>
        <name>swap32</name>
        <param>
          <type><ref refid="group__hal__dos_1ga09a1e304d66d35dd47daffee9731edaa" kindref="member">uint32_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Swap the byte order of a 32-bit value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to swap </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new 32-bit value with opposite endianness of <emphasis>value</emphasis> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/swapbytes.c" line="33" column="1" bodyfile="src/util/swapbytes.c" bodystart="33" bodyend="39"/>
      </memberdef>
      <memberdef kind="function" id="group__util__byteorder_1ga7cf3526e1af5c8642d2ec02caecf99bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="group__hal__dos_1ga5a8b2dc9e45a9ee81a94ef304fb62505" kindref="member">uint16_t</ref></type>
        <definition>uint16_t swap16</definition>
        <argsstring>(uint16_t value)</argsstring>
        <name>swap16</name>
        <param>
          <type><ref refid="group__hal__dos_1ga5a8b2dc9e45a9ee81a94ef304fb62505" kindref="member">uint16_t</ref></type>
          <declname>value</declname>
        </param>
        <briefdescription>
<para>Swap the byte order of a 16-bit value. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="in">value</parametername>
</parameternamelist>
<parameterdescription>
<para>value to swap </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>new 16-bit value with opposite endianness of <emphasis>value</emphasis> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/swapbytes.c" line="47" column="1" bodyfile="src/util/swapbytes.c" bodystart="47" bodyend="50"/>
      </memberdef>
      <memberdef kind="function" id="group__util__byteorder_1ga23fd4d4005a80a26ff3c6ba23a4af560" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void _swapcpy</definition>
        <argsstring>(void FAR *dst, const void FAR *src, uint_fast8_t count)</argsstring>
        <name>_swapcpy</name>
        <param>
          <type>void <ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref> *</type>
          <declname>dst</declname>
        </param>
        <param>
          <type>const void <ref refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" kindref="member">FAR</ref> *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>uint_fast8_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Function similar to memcpy() but reverses byte order during copy. Copy <emphasis>count</emphasis> from <emphasis>src</emphasis> to <emphasis>dst</emphasis> while reversing the order. Assumes that <emphasis>src</emphasis> and <emphasis>dst</emphasis> do not overlap. </para>        </briefdescription>
        <detaileddescription>
<internal><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername direction="out">dst</parametername>
</parameternamelist>
<parameterdescription>
<para>destination buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">src</parametername>
</parameternamelist>
<parameterdescription>
<para>source buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername direction="in">count</parametername>
</parameternamelist>
<parameterdescription>
<para>number of bytes to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></internal>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="src/util/swapcpy.c" line="24" column="1" bodyfile="src/util/swapcpy.c" bodystart="24" bodyend="36"/>
        <references refid="group__hal_1gaef060b3456fdcc093a7210a762d5f2ed" compoundref="platform_8h" startline="370">FAR</references>
      </memberdef>
      </sectiondef>
      <sectiondef kind="define">
      <memberdef kind="define" id="group__util__byteorder_1gabb9b3120f6457dc04471c134fee1d221" prot="public" static="no">
        <name>be16toh</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="group__util__byteorder_1ga7cf3526e1af5c8642d2ec02caecf99bc" kindref="member">swap16</ref>(x)</initializer>
        <briefdescription>
<para>Convert a uint16_t in big-endian byte order to host byte order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="131" column="12" bodyfile="include/xbee/byteorder.h" bodystart="131" bodyend="-1"/>
        <referencedby refid="group__xbee__commissioning_1ga886012f757de4a74d0c992d3ab04a373" compoundref="xbee__commissioning_8c" startline="52" endline="56">xbee_comm_SC</referencedby>
        <referencedby refid="group__xbee__discovery_1ga1efd48449a49119fc19ab9843af5ef6c" compoundref="xbee__discovery_8c" startline="39" endline="74">xbee_disc_nd_parse</referencedby>
        <referencedby refid="group__xbee__io_1ga49aae35ec2a46306bf2ad593cecbcf26" compoundref="xbee__io_8c" startline="63" endline="109">xbee_io_response_parse</referencedby>
        <referencedby refid="group__xbee__wpan_1ga8cb1973677412a2c5627a77009a8f283" compoundref="xbee__wpan_8c" startline="54" endline="93">_xbee_handle_receive_explicit</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1ga6acac399720b3a57d9050420aa0aac41" prot="public" static="no">
        <name>be32toh</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="group__util__byteorder_1ga5bdbc60a02db00841f567d1ade52f877" kindref="member">swap32</ref>(x)</initializer>
        <briefdescription>
<para>Convert a uint32_t in big-endian byte order to host byte order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="132" column="12" bodyfile="include/xbee/byteorder.h" bodystart="132" bodyend="-1"/>
        <referencedby refid="group__xbee__discovery_1gab155a485a9aa4870a45dd86d1d468c52" compoundref="xbee__discovery_8c" startline="96" endline="107">xbee_disc_node_id_dump</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1ga4b9167199621b390f82c3e5361ba6df6" prot="public" static="no">
        <name>htobe16</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="group__util__byteorder_1ga7cf3526e1af5c8642d2ec02caecf99bc" kindref="member">swap16</ref>(x)</initializer>
        <briefdescription>
<para>Convert a uint16_t in host byte order to big-endian byte order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="127" column="12" bodyfile="include/xbee/byteorder.h" bodystart="127" bodyend="-1"/>
        <referencedby refid="group__xbee__atcmd_1ga2c58eedef60b41dd30ae1f6b475606a8" compoundref="xbee__atcmd_8c" startline="1404" endline="1485">xbee_cmd_send</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1gaa65407014913309932b9a5ea3c16a86d" prot="public" static="no">
        <name>htobe32</name>
        <param><defname>x</defname></param>
        <initializer><ref refid="group__util__byteorder_1ga5bdbc60a02db00841f567d1ade52f877" kindref="member">swap32</ref>(x)</initializer>
        <briefdescription>
<para>Convert a uint32_t in host byte order to big-endian byte order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="128" column="12" bodyfile="include/xbee/byteorder.h" bodystart="128" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1ga3ea73a6089f61223b225c46e2ba58a47" prot="public" static="no">
        <name>htole16</name>
        <param><defname>x</defname></param>
        <initializer>(x)</initializer>
        <briefdescription>
<para>Convert a uint16_t in host byte order to little-endian byte order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="135" column="12" bodyfile="include/xbee/byteorder.h" bodystart="135" bodyend="-1"/>
        <referencedby refid="group__zcl__client_1ga11f72950e4467286ef18468fbcb4bed4" compoundref="zcl__client_8c" startline="426" endline="465">zcl_create_attribute_records</referencedby>
        <referencedby refid="group__zdo_1ga1a65d88af9f0c9906d548aa1ff2586f7" compoundref="zigbee__zdo_8c" startline="199" endline="221">_match_desc_cluster_list</referencedby>
        <referencedby refid="group__zdo_1ga5746efffb4b90718eb973796f2b4bb41" compoundref="zigbee__zdo_8c" startline="247" endline="292">zdo_match_desc_request</referencedby>
        <referencedby refid="group__zdo_1gafbbece379bc09af360099d1e0825d507" compoundref="zigbee__zdo_8c" startline="422" endline="464">zdo_simple_desc_request</referencedby>
        <referencedby refid="group__zdo_1ga558539813d6a9c8813eeae855e77385f" compoundref="zigbee__zdo_8c" startline="483" endline="509">_simple_desc_cluster_list</referencedby>
        <referencedby refid="group__zdo_1gac842062e5e1a60d25cddf16ec22ef601" compoundref="zigbee__zdo_8c" startline="925" endline="969">zdo_send_descriptor_req</referencedby>
        <referencedby refid="group__zdo_1ga4af5f8d70054f7883dbc1305e3a3f181" compoundref="zigbee__zdo_8c" startline="1134" endline="1173">zdo_send_ieee_addr_req</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1ga9bea1e76e277f13ae39ac86095510bfa" prot="public" static="no">
        <name>htole32</name>
        <param><defname>x</defname></param>
        <initializer>(x)</initializer>
        <briefdescription>
<para>Convert a uint32_t in host byte order to little-endian byte order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="136" column="12" bodyfile="include/xbee/byteorder.h" bodystart="136" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1ga684a5d26d1989cbd925e97292cc81c72" prot="public" static="no">
        <name>le16toh</name>
        <param><defname>x</defname></param>
        <initializer>(x)</initializer>
        <briefdescription>
<para>Convert a uint16_t in little-endian byte order to host byte order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="139" column="12" bodyfile="include/xbee/byteorder.h" bodystart="139" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1gad2dfbafcefb3add65ea44e581398e90a" prot="public" static="no">
        <name>le32toh</name>
        <param><defname>x</defname></param>
        <initializer>(x)</initializer>
        <briefdescription>
<para>Convert a uint32_t in little-endian byte order to host byte order. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="140" column="12" bodyfile="include/xbee/byteorder.h" bodystart="140" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1gad871f144718432cb04f76e79aec80c87" prot="public" static="no">
        <name>memcpy_betoh</name>
        <param><defname>dst</defname></param>
        <param><defname>src_be</defname></param>
        <param><defname>count</defname></param>
        <initializer><ref refid="group__util__byteorder_1ga23fd4d4005a80a26ff3c6ba23a4af560" kindref="member">_swapcpy</ref>( dst, src_be, count)</initializer>
        <briefdescription>
<para>Copy <emphasis>count</emphasis> bytes in big-endian byte order from <emphasis>src_be</emphasis> to <emphasis>dst</emphasis> in host byte order (equivalent to memcpy() on big-endian platforms). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="108" column="11" bodyfile="include/xbee/byteorder.h" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1ga75cf1250c9f15ea3f0d87250c2b43a51" prot="public" static="no">
        <name>memcpy_betole</name>
        <param><defname>dst_le</defname></param>
        <param><defname>src_be</defname></param>
        <param><defname>count</defname></param>
        <initializer><ref refid="group__util__byteorder_1ga23fd4d4005a80a26ff3c6ba23a4af560" kindref="member">_swapcpy</ref>( dst_le, src_be, count)</initializer>
        <briefdescription>
<para>Copy <emphasis>count</emphasis> bytes in big-endian byte order from <emphasis>src_be</emphasis> to <emphasis>dst_le</emphasis> in little-endian byte order (always swaps byte order). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="118" column="10" bodyfile="include/xbee/byteorder.h" bodystart="118" bodyend="-1"/>
        <referencedby refid="group__zdo_1ga40f076c190ab2390836687b8e1f705eb" compoundref="zigbee__zdo_8c" startline="1028" endline="1070">zdo_send_nwk_addr_req</referencedby>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1gaf0f22982f04251ea70fba1fb30d55ef5" prot="public" static="no">
        <name>memcpy_htobe</name>
        <param><defname>dst_be</defname></param>
        <param><defname>src</defname></param>
        <param><defname>count</defname></param>
        <initializer><ref refid="group__util__byteorder_1ga23fd4d4005a80a26ff3c6ba23a4af560" kindref="member">_swapcpy</ref>( dst_be, src, count)</initializer>
        <briefdescription>
<para>Copy <emphasis>count</emphasis> bytes in host byte order from <emphasis>src</emphasis> to <emphasis>dst_be</emphasis> in big-endian byte order (equivalent to memcpy() on big-endian platforms). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="109" column="11" bodyfile="include/xbee/byteorder.h" bodystart="109" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1gaf677c5c03da581dab8015e8350750c00" prot="public" static="no">
        <name>memcpy_htole</name>
        <param><defname>dst_le</defname></param>
        <param><defname>src</defname></param>
        <param><defname>count</defname></param>
        <initializer>_f_memcpy( dst_le, src, count)</initializer>
        <briefdescription>
<para>Copy <emphasis>count</emphasis> bytes in host byte order from <emphasis>src</emphasis> to <emphasis>dst_le</emphasis> in little-endian byte order (equivalent to memcpy() on little-endian platforms). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="106" column="11" bodyfile="include/xbee/byteorder.h" bodystart="106" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1gac8afbbc0aa0b7d35ebf38f54dbfbe6c2" prot="public" static="no">
        <name>memcpy_letobe</name>
        <param><defname>dst_be</defname></param>
        <param><defname>src_le</defname></param>
        <param><defname>count</defname></param>
        <initializer><ref refid="group__util__byteorder_1ga23fd4d4005a80a26ff3c6ba23a4af560" kindref="member">_swapcpy</ref>( dst_be, src_le, count)</initializer>
        <briefdescription>
<para>Copy <emphasis>count</emphasis> bytes in little-endian byte order from <emphasis>src_le</emphasis> to <emphasis>dst_be</emphasis> in big-endian byte order (always swaps byte order). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="120" column="10" bodyfile="include/xbee/byteorder.h" bodystart="120" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="group__util__byteorder_1ga9639d55fe8e5b4daf83a76de40aa3e4e" prot="public" static="no">
        <name>memcpy_letoh</name>
        <param><defname>dst</defname></param>
        <param><defname>src_le</defname></param>
        <param><defname>count</defname></param>
        <initializer>_f_memcpy( dst, src_le, count)</initializer>
        <briefdescription>
<para>Copy <emphasis>count</emphasis> bytes in little-endian byte order from <emphasis>src_le</emphasis> to <emphasis>dst</emphasis> in host byte order (equivalent to memcpy() on little-endian platforms). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/xbee/byteorder.h" line="105" column="11" bodyfile="include/xbee/byteorder.h" bodystart="105" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
  </compounddef>
</doxygen>
