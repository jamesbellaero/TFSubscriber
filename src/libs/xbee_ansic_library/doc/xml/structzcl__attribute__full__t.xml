<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structzcl__attribute__full__t" kind="struct" language="C++" prot="public">
    <compoundname>zcl_attribute_full_t</compoundname>
    <includes refid="zcl_8h" local="yes">zigbee/zcl.h</includes>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="group__zcl_1ga8f041b4b145b30d5f92acdcb08ba43a3" prot="public" static="no" mutable="no">
        <type><ref refid="structzcl__attribute__base__t" kindref="compound">zcl_attribute_base_t</ref></type>
        <definition>zcl_attribute_base_t base</definition>
        <argsstring></argsstring>
        <name>base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl.h" line="782" column="1" bodyfile="include/zigbee/zcl.h" bodystart="782" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__zcl_1gaad888af9d07cd3b611c75f15f8c90dfe" prot="public" static="no" mutable="no">
        <type><ref refid="unionzcl__attribute__minmax__t" kindref="compound">zcl_attribute_minmax_t</ref></type>
        <definition>zcl_attribute_minmax_t min</definition>
        <argsstring></argsstring>
        <name>min</name>
        <briefdescription>
<para>Minimum value for attribute (currently unused until I pick a value to represent &quot;none&quot;). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl.h" line="786" column="1" bodyfile="include/zigbee/zcl.h" bodystart="786" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__zcl_1gae2490849003f8344782c06334b1e6b17" prot="public" static="no" mutable="no">
        <type><ref refid="unionzcl__attribute__minmax__t" kindref="compound">zcl_attribute_minmax_t</ref></type>
        <definition>zcl_attribute_minmax_t max</definition>
        <argsstring></argsstring>
        <name>max</name>
        <briefdescription>
<para>Maximum value for attribute, assumes 32-bit limit. </para>        </briefdescription>
        <detaileddescription>
<para>For string attributes, the maximum length that can be stored at <computeroutput>value</computeroutput>. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl.h" line="790" column="1" bodyfile="include/zigbee/zcl.h" bodystart="790" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__zcl_1ga80943597b8cce9d751a45efa823596ac" prot="public" static="no" mutable="no">
        <type><ref refid="group__zcl_1gace94cfc3f22379fa08a5b8de8c6977f6" kindref="member">zcl_attribute_update_fn</ref></type>
        <definition>zcl_attribute_update_fn read</definition>
        <argsstring></argsstring>
        <name>read</name>
        <briefdescription>
<para>On an attribute read, the ZCL dispatcher will call the .read function to refresh the attribute&apos;s value before responding to the request. </para>        </briefdescription>
        <detaileddescription>
<para>Do I need a return value in the function to pass an error up? </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl.h" line="795" column="1" bodyfile="include/zigbee/zcl.h" bodystart="795" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="group__zcl_1gac8bd2f85f7df500d34b1d3cd27033a4e" prot="public" static="no" mutable="no">
        <type><ref refid="group__zcl_1ga70fa1740c517a1e49c700cba7cf6b339" kindref="member">zcl_attribute_write_fn</ref></type>
        <definition>zcl_attribute_write_fn write</definition>
        <argsstring></argsstring>
        <name>write</name>
        <briefdescription>
<para>On an attribute write, the ZCL dispatcher will call the .write function with a structure containing information about the write request. </para>        </briefdescription>
        <detaileddescription>
<para>See the documentation for <ref refid="group__zcl_1ga70fa1740c517a1e49c700cba7cf6b339" kindref="member">zcl_attribute_write_fn()</ref> for the API, and the Time and Identify clusters for examples of its use. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="include/zigbee/zcl.h" line="801" column="1" bodyfile="include/zigbee/zcl.h" bodystart="801" bodyend="-1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Use this structure for attributes with min/max values or the need to have a read/write function. </para>    </briefdescription>
    <detaileddescription>
<para>Be sure to set the ZCL_ATTRIB_FLAG_FULL flag in .base.flags so the attribute is parsed with the correct type. </para>    </detaileddescription>
    <collaborationgraph>
      <node id="291">
        <label>zcl_attribute_minmax_t</label>
        <link refid="unionzcl__attribute__minmax__t"/>
      </node>
      <node id="290">
        <label>zcl_attribute_full_t</label>
        <link refid="structzcl__attribute__full__t"/>
        <childnode refid="290" relation="usage">
          <edgelabel>read</edgelabel>
          <edgelabel>write</edgelabel>
        </childnode>
        <childnode refid="291" relation="usage">
          <edgelabel>min</edgelabel>
          <edgelabel>max</edgelabel>
        </childnode>
        <childnode refid="292" relation="usage">
          <edgelabel>base</edgelabel>
        </childnode>
      </node>
      <node id="292">
        <label>zcl_attribute_base_t</label>
        <link refid="structzcl__attribute__base__t"/>
      </node>
    </collaborationgraph>
    <location file="include/zigbee/zcl.h" line="781" column="1" bodyfile="include/zigbee/zcl.h" bodystart="780" bodyend="802"/>
    <listofallmembers>
      <member refid="group__zcl_1ga8f041b4b145b30d5f92acdcb08ba43a3" prot="public" virt="non-virtual"><scope>zcl_attribute_full_t</scope><name>base</name></member>
      <member refid="group__zcl_1gae2490849003f8344782c06334b1e6b17" prot="public" virt="non-virtual"><scope>zcl_attribute_full_t</scope><name>max</name></member>
      <member refid="group__zcl_1gaad888af9d07cd3b611c75f15f8c90dfe" prot="public" virt="non-virtual"><scope>zcl_attribute_full_t</scope><name>min</name></member>
      <member refid="group__zcl_1ga80943597b8cce9d751a45efa823596ac" prot="public" virt="non-virtual"><scope>zcl_attribute_full_t</scope><name>read</name></member>
      <member refid="group__zcl_1gac8bd2f85f7df500d34b1d3cd27033a4e" prot="public" virt="non-virtual"><scope>zcl_attribute_full_t</scope><name>write</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
